
EE242_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008c68  08008c68  00018c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d20  08008d20  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d28  08008d28  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08008d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00001d94  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ef8  20001ef8  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa7e  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cef  00000000  00000000  0002fc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00032908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b18  00000000  00000000  00033578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024535  00000000  00000000  00034090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a11  00000000  00000000  000585c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0ee0  00000000  00000000  00068fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139eb6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036b4  00000000  00000000  00139f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c50 	.word	0x08008c50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	08008c50 	.word	0x08008c50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <Read_ADC>:

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);

void Read_ADC(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000dc4:	481c      	ldr	r0, [pc, #112]	; (8000e38 <Read_ADC+0x78>)
 8000dc6:	f000 fbf1 	bl	80015ac <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1,10)== HAL_OK){
 8000dca:	210a      	movs	r1, #10
 8000dcc:	481a      	ldr	r0, [pc, #104]	; (8000e38 <Read_ADC+0x78>)
 8000dce:	f000 fcf2 	bl	80017b6 <HAL_ADC_PollForConversion>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d122      	bne.n	8000e1e <Read_ADC+0x5e>
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000dd8:	4817      	ldr	r0, [pc, #92]	; (8000e38 <Read_ADC+0x78>)
 8000dda:	f000 fd77 	bl	80018cc <HAL_ADC_GetValue>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <Read_ADC+0x7c>)
 8000de4:	801a      	strh	r2, [r3, #0]
		Vadc = 3.3 * adc_value/4095;
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <Read_ADC+0x7c>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fb9a 	bl	8000524 <__aeabi_i2d>
 8000df0:	a30d      	add	r3, pc, #52	; (adr r3, 8000e28 <Read_ADC+0x68>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f7ff fbff 	bl	80005f8 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	a30b      	add	r3, pc, #44	; (adr r3, 8000e30 <Read_ADC+0x70>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f7ff fd20 	bl	800084c <__aeabi_ddiv>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	f7ff fe02 	bl	8000a1c <__aeabi_d2f>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <Read_ADC+0x80>)
 8000e1c:	6013      	str	r3, [r2, #0]
	}

	HAL_ADC_Stop(&hadc1);
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <Read_ADC+0x78>)
 8000e20:	f000 fc96 	bl	8001750 <HAL_ADC_Stop>
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	66666666 	.word	0x66666666
 8000e2c:	400a6666 	.word	0x400a6666
 8000e30:	00000000 	.word	0x00000000
 8000e34:	40affe00 	.word	0x40affe00
 8000e38:	20000280 	.word	0x20000280
 8000e3c:	20000180 	.word	0x20000180
 8000e40:	20000184 	.word	0x20000184

08000e44 <Log_ADC_Data>:

void Log_ADC_Data() {
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af02      	add	r7, sp, #8
    static uint32_t previous_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000e4a:	f000 fb3b 	bl	80014c4 <HAL_GetTick>
 8000e4e:	6078      	str	r0, [r7, #4]
    if (current_time - previous_time >= LOG_INTERVAL_MS) {
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <Log_ADC_Data+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e5c:	d31f      	bcc.n	8000e9e <Log_ADC_Data+0x5a>
        previous_time = current_time;
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <Log_ADC_Data+0x64>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6013      	str	r3, [r2, #0]

        Read_ADC();
 8000e64:	f7ff ffac 	bl	8000dc0 <Read_ADC>

        // Log verisini oluştur
        snprintf((char*)buffer, sizeof(buffer), "ADC Value: %hu, Voltage: %.2fV\n", adc_value, Vadc);
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <Log_ADC_Data+0x68>)
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	461c      	mov	r4, r3
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <Log_ADC_Data+0x6c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fb68 	bl	8000548 <__aeabi_f2d>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	e9cd 2300 	strd	r2, r3, [sp]
 8000e80:	4623      	mov	r3, r4
 8000e82:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <Log_ADC_Data+0x70>)
 8000e84:	2140      	movs	r1, #64	; 0x40
 8000e86:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <Log_ADC_Data+0x74>)
 8000e88:	f007 fa6e 	bl	8008368 <sniprintf>

        // Log verisini USB üzerinden gönder
        CDC_Transmit_FS(buffer, strlen((char*)buffer));
 8000e8c:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <Log_ADC_Data+0x74>)
 8000e8e:	f7ff f99f 	bl	80001d0 <strlen>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <Log_ADC_Data+0x74>)
 8000e9a:	f006 fdc9 	bl	8007a30 <CDC_Transmit_FS>
    }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd90      	pop	{r4, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200002c8 	.word	0x200002c8
 8000eac:	20000180 	.word	0x20000180
 8000eb0:	20000184 	.word	0x20000184
 8000eb4:	08008c6c 	.word	0x08008c6c
 8000eb8:	20000188 	.word	0x20000188

08000ebc <Read_Flicker>:
void Read_Flicker() {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af02      	add	r7, sp, #8
    static uint8_t sample_index = 0;
    static uint32_t previous_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000ec2:	f000 faff 	bl	80014c4 <HAL_GetTick>
 8000ec6:	6078      	str	r0, [r7, #4]

    if (current_time - previous_time >= FLICKER_INTERVAL_MS) {
 8000ec8:	4b34      	ldr	r3, [pc, #208]	; (8000f9c <Read_Flicker+0xe0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d95f      	bls.n	8000f94 <Read_Flicker+0xd8>
        previous_time = current_time;
 8000ed4:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <Read_Flicker+0xe0>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]

        HAL_ADC_Start(&hadc1); // ADC dönüşümünü başlat
 8000eda:	4831      	ldr	r0, [pc, #196]	; (8000fa0 <Read_Flicker+0xe4>)
 8000edc:	f000 fb66 	bl	80015ac <HAL_ADC_Start>

        // Fotodiyot veya fotosel değerini oku
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK) {
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	482f      	ldr	r0, [pc, #188]	; (8000fa0 <Read_Flicker+0xe4>)
 8000ee4:	f000 fc67 	bl	80017b6 <HAL_ADC_PollForConversion>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10b      	bne.n	8000f06 <Read_Flicker+0x4a>
            uint16_t flicker_value = HAL_ADC_GetValue(&hadc1);
 8000eee:	482c      	ldr	r0, [pc, #176]	; (8000fa0 <Read_Flicker+0xe4>)
 8000ef0:	f000 fcec 	bl	80018cc <HAL_ADC_GetValue>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	807b      	strh	r3, [r7, #2]
            flicker_samples[sample_index] = flicker_value;
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <Read_Flicker+0xe8>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <Read_Flicker+0xec>)
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        }

        HAL_ADC_Stop(&hadc1); // ADC dönüşümünü durdur
 8000f06:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <Read_Flicker+0xe4>)
 8000f08:	f000 fc22 	bl	8001750 <HAL_ADC_Stop>

        sample_index++;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <Read_Flicker+0xe8>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <Read_Flicker+0xe8>)
 8000f16:	701a      	strb	r2, [r3, #0]
        if (sample_index >= NUM_SAMPLES) {
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <Read_Flicker+0xe8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b3b      	cmp	r3, #59	; 0x3b
 8000f1e:	d939      	bls.n	8000f94 <Read_Flicker+0xd8>
            // Örnekleme tamamlandı, flicker değerini hesapla ve gönder
            float flicker_average = 0.0;
 8000f20:	f04f 0300 	mov.w	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
            for (uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000f26:	2300      	movs	r3, #0
 8000f28:	72fb      	strb	r3, [r7, #11]
 8000f2a:	e010      	b.n	8000f4e <Read_Flicker+0x92>
                flicker_average += flicker_samples[i];
 8000f2c:	7afb      	ldrb	r3, [r7, #11]
 8000f2e:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <Read_Flicker+0xec>)
 8000f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f34:	ee07 3a90 	vmov	s15, r3
 8000f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f44:	edc7 7a03 	vstr	s15, [r7, #12]
            for (uint8_t i = 0; i < NUM_SAMPLES; i++) {
 8000f48:	7afb      	ldrb	r3, [r7, #11]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	72fb      	strb	r3, [r7, #11]
 8000f4e:	7afb      	ldrb	r3, [r7, #11]
 8000f50:	2b3b      	cmp	r3, #59	; 0x3b
 8000f52:	d9eb      	bls.n	8000f2c <Read_Flicker+0x70>
            }
            flicker_average /= NUM_SAMPLES;
 8000f54:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f58:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000fac <Read_Flicker+0xf0>
 8000f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f60:	edc7 7a03 	vstr	s15, [r7, #12]

            // Flicker değerini tampona formatla
            snprintf((char*)flicker_buffer, sizeof(flicker_buffer), "Flicker: %.2f\n", flicker_average);
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f7ff faef 	bl	8000548 <__aeabi_f2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	e9cd 2300 	strd	r2, r3, [sp]
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <Read_Flicker+0xf4>)
 8000f74:	2140      	movs	r1, #64	; 0x40
 8000f76:	480f      	ldr	r0, [pc, #60]	; (8000fb4 <Read_Flicker+0xf8>)
 8000f78:	f007 f9f6 	bl	8008368 <sniprintf>
            // Flicker değerini USB üzerinden gönder
            CDC_Transmit_FS(flicker_buffer, strlen((char*)flicker_buffer));
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <Read_Flicker+0xf8>)
 8000f7e:	f7ff f927 	bl	80001d0 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <Read_Flicker+0xf8>)
 8000f8a:	f006 fd51 	bl	8007a30 <CDC_Transmit_FS>

            sample_index = 0; // Bir sonraki örnekleme için örnekleyici indeksini sıfırla
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <Read_Flicker+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200002cc 	.word	0x200002cc
 8000fa0:	20000280 	.word	0x20000280
 8000fa4:	200002d0 	.word	0x200002d0
 8000fa8:	200001c8 	.word	0x200001c8
 8000fac:	42700000 	.word	0x42700000
 8000fb0:	08008c8c 	.word	0x08008c8c
 8000fb4:	20000240 	.word	0x20000240

08000fb8 <main>:

int main(void)
{
 8000fb8:	b598      	push	{r3, r4, r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  HAL_Init();
 8000fbc:	f000 fa1c 	bl	80013f8 <HAL_Init>


  SystemClock_Config();
 8000fc0:	f000 f820 	bl	8001004 <SystemClock_Config>

  MX_GPIO_Init();
 8000fc4:	f000 f8d8 	bl	8001178 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fc8:	f000 f884 	bl	80010d4 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000fcc:	f006 fc5c 	bl	8007888 <MX_USB_DEVICE_Init>

  while (1)
  {
	  CDC_Transmit_FS((uint8_t *)data, strlen(data));
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <main+0x48>)
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <main+0x48>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f8f9 	bl	80001d0 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	f006 fd23 	bl	8007a30 <CDC_Transmit_FS>
	  HAL_Delay (500);
 8000fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fee:	f000 fa75 	bl	80014dc <HAL_Delay>
	  Read_ADC();
 8000ff2:	f7ff fee5 	bl	8000dc0 <Read_ADC>
	  Log_ADC_Data();
 8000ff6:	f7ff ff25 	bl	8000e44 <Log_ADC_Data>
	  Read_Flicker();
 8000ffa:	f7ff ff5f 	bl	8000ebc <Read_Flicker>
	  CDC_Transmit_FS((uint8_t *)data, strlen(data));
 8000ffe:	e7e7      	b.n	8000fd0 <main+0x18>
 8001000:	20000000 	.word	0x20000000

08001004 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	; 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f007 f9a0 	bl	8008358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <SystemClock_Config+0xc8>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a26      	ldr	r2, [pc, #152]	; (80010cc <SystemClock_Config+0xc8>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <SystemClock_Config+0xc8>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <SystemClock_Config+0xcc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a20      	ldr	r2, [pc, #128]	; (80010d0 <SystemClock_Config+0xcc>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <SystemClock_Config+0xcc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106c:	2302      	movs	r3, #2
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001070:	2300      	movs	r3, #0
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001074:	2310      	movs	r3, #16
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001078:	23c0      	movs	r3, #192	; 0xc0
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001080:	2304      	movs	r3, #4
 8001082:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001084:	f107 0320 	add.w	r3, r7, #32
 8001088:	4618      	mov	r0, r3
 800108a:	f002 fb77 	bl	800377c <HAL_RCC_OscConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001094:	f000 f898 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001098:	230f      	movs	r3, #15
 800109a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fdda 	bl	8003c6c <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80010be:	f000 f883 	bl	80011c8 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	; 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40007000 	.word	0x40007000

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_ADC1_Init+0x98>)
 80010e8:	4a21      	ldr	r2, [pc, #132]	; (8001170 <MX_ADC1_Init+0x9c>)
 80010ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_ADC1_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <MX_ADC1_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_ADC1_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_ADC1_Init+0x98>)
 8001100:	2201      	movs	r2, #1
 8001102:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_ADC1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_ADC1_Init+0x98>)
 800110e:	2200      	movs	r2, #0
 8001110:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <MX_ADC1_Init+0x98>)
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <MX_ADC1_Init+0xa0>)
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_ADC1_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <MX_ADC1_Init+0x98>)
 8001120:	2201      	movs	r2, #1
 8001122:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC1_Init+0x98>)
 800112e:	2201      	movs	r2, #1
 8001130:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_ADC1_Init+0x98>)
 8001134:	f000 f9f6 	bl	8001524 <HAL_ADC_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 f843 	bl	80011c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001146:	2301      	movs	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_ADC1_Init+0x98>)
 8001154:	f000 fbc8 	bl	80018e8 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800115e:	f000 f833 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000280 	.word	0x20000280
 8001170:	40012000 	.word	0x40012000
 8001174:	0f000001 	.word	0x0f000001

08001178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_GPIO_Init+0x4c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <MX_GPIO_Init+0x4c>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <MX_GPIO_Init+0x4c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_GPIO_Init+0x4c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <MX_GPIO_Init+0x4c>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_GPIO_Init+0x4c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <Error_Handler+0x8>
	...

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_MspInit+0x4c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_MspInit+0x4c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_ADC_MspInit+0x7c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d127      	bne.n	8001296 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <HAL_ADC_MspInit+0x80>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <HAL_ADC_MspInit+0x80>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_ADC_MspInit+0x80>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_ADC_MspInit+0x80>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_ADC_MspInit+0x80>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_ADC_MspInit+0x80>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127e:	2301      	movs	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001282:	2303      	movs	r3, #3
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_ADC_MspInit+0x84>)
 8001292:	f000 fe59 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	; 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40012000 	.word	0x40012000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f8d0 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <OTG_FS_IRQHandler+0x10>)
 8001306:	f001 f90b 	bl	8002520 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200017bc 	.word	0x200017bc

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f006 ffd0 	bl	80082e8 <__errno>
 8001348:	4603      	mov	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20020000 	.word	0x20020000
 8001374:	00000400 	.word	0x00000400
 8001378:	200002d4 	.word	0x200002d4
 800137c:	20001ef8 	.word	0x20001ef8

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013aa:	490e      	ldr	r1, [pc, #56]	; (80013e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b0:	e002      	b.n	80013b8 <LoopCopyDataInit>

080013b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b6:	3304      	adds	r3, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013bc:	d3f9      	bcc.n	80013b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013be:	4a0b      	ldr	r2, [pc, #44]	; (80013ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c0:	4c0b      	ldr	r4, [pc, #44]	; (80013f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c4:	e001      	b.n	80013ca <LoopFillZerobss>

080013c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c8:	3204      	adds	r2, #4

080013ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013cc:	d3fb      	bcc.n	80013c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ce:	f7ff ffd7 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013d2:	f006 ff8f 	bl	80082f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013d6:	f7ff fdef 	bl	8000fb8 <main>
  bx  lr    
 80013da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80013e8:	08008d30 	.word	0x08008d30
  ldr r2, =_sbss
 80013ec:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80013f0:	20001ef8 	.word	0x20001ef8

080013f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0d      	ldr	r2, [pc, #52]	; (8001438 <HAL_Init+0x40>)
 8001402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001406:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_Init+0x40>)
 800140e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001412:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a07      	ldr	r2, [pc, #28]	; (8001438 <HAL_Init+0x40>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001420:	2003      	movs	r0, #3
 8001422:	f000 fd4f 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001426:	200f      	movs	r0, #15
 8001428:	f000 f808 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142c:	f7ff fed2 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023c00 	.word	0x40023c00

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fd67 	bl	8001f2e <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 fd2f 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000004 	.word	0x20000004
 8001494:	2000000c 	.word	0x2000000c
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	200002d8 	.word	0x200002d8

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	200002d8 	.word	0x200002d8

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000000c 	.word	0x2000000c

08001524 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e033      	b.n	80015a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fe6e 	bl	8001224 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 0310 	and.w	r3, r3, #16
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800156a:	f023 0302 	bic.w	r3, r3, #2
 800156e:	f043 0202 	orr.w	r2, r3, #2
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fad8 	bl	8001b2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	641a      	str	r2, [r3, #64]	; 0x40
 8001592:	e001      	b.n	8001598 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_Start+0x1a>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e0b2      	b.n	800172c <HAL_ADC_Start+0x180>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d018      	beq.n	800160e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015ec:	4b52      	ldr	r3, [pc, #328]	; (8001738 <HAL_ADC_Start+0x18c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a52      	ldr	r2, [pc, #328]	; (800173c <HAL_ADC_Start+0x190>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	0c9a      	lsrs	r2, r3, #18
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001600:	e002      	b.n	8001608 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3b01      	subs	r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f9      	bne.n	8001602 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b01      	cmp	r3, #1
 800161a:	d17a      	bne.n	8001712 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001646:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165a:	d106      	bne.n	800166a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f023 0206 	bic.w	r2, r3, #6
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	645a      	str	r2, [r3, #68]	; 0x44
 8001668:	e002      	b.n	8001670 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <HAL_ADC_Start+0x194>)
 800167a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001684:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2b00      	cmp	r3, #0
 8001690:	d12a      	bne.n	80016e8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a2b      	ldr	r2, [pc, #172]	; (8001744 <HAL_ADC_Start+0x198>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d015      	beq.n	80016c8 <HAL_ADC_Start+0x11c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a29      	ldr	r2, [pc, #164]	; (8001748 <HAL_ADC_Start+0x19c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d105      	bne.n	80016b2 <HAL_ADC_Start+0x106>
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_ADC_Start+0x194>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 031f 	and.w	r3, r3, #31
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00a      	beq.n	80016c8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a25      	ldr	r2, [pc, #148]	; (800174c <HAL_ADC_Start+0x1a0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d136      	bne.n	800172a <HAL_ADC_Start+0x17e>
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_ADC_Start+0x194>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d130      	bne.n	800172a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d129      	bne.n	800172a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	e020      	b.n	800172a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_ADC_Start+0x198>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d11b      	bne.n	800172a <HAL_ADC_Start+0x17e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d114      	bne.n	800172a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	e00b      	b.n	800172a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f043 0210 	orr.w	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f043 0201 	orr.w	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	20000004 	.word	0x20000004
 800173c:	431bde83 	.word	0x431bde83
 8001740:	40012300 	.word	0x40012300
 8001744:	40012000 	.word	0x40012000
 8001748:	40012100 	.word	0x40012100
 800174c:	40012200 	.word	0x40012200

08001750 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Stop+0x16>
 8001762:	2302      	movs	r3, #2
 8001764:	e021      	b.n	80017aa <HAL_ADC_Stop+0x5a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0201 	bic.w	r2, r2, #1
 800177c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d109      	bne.n	80017a0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d113      	bne.n	80017fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017e2:	d10b      	bne.n	80017fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0220 	orr.w	r2, r3, #32
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e063      	b.n	80018c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80017fc:	f7ff fe62 	bl	80014c4 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001802:	e021      	b.n	8001848 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180a:	d01d      	beq.n	8001848 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_ADC_PollForConversion+0x6c>
 8001812:	f7ff fe57 	bl	80014c4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d212      	bcs.n	8001848 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b02      	cmp	r3, #2
 800182e:	d00b      	beq.n	8001848 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f043 0204 	orr.w	r2, r3, #4
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e03d      	b.n	80018c4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b02      	cmp	r3, #2
 8001854:	d1d6      	bne.n	8001804 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f06f 0212 	mvn.w	r2, #18
 800185e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d123      	bne.n	80018c2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11f      	bne.n	80018c2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800189a:	2b00      	cmp	r3, #0
 800189c:	d111      	bne.n	80018c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1c>
 8001900:	2302      	movs	r3, #2
 8001902:	e105      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x228>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b09      	cmp	r3, #9
 8001912:	d925      	bls.n	8001960 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68d9      	ldr	r1, [r3, #12]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	3b1e      	subs	r3, #30
 800192a:	2207      	movs	r2, #7
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43da      	mvns	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	400a      	ands	r2, r1
 8001938:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68d9      	ldr	r1, [r3, #12]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	4618      	mov	r0, r3
 800194c:	4603      	mov	r3, r0
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4403      	add	r3, r0
 8001952:	3b1e      	subs	r3, #30
 8001954:	409a      	lsls	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	e022      	b.n	80019a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6919      	ldr	r1, [r3, #16]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	2207      	movs	r2, #7
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	400a      	ands	r2, r1
 8001982:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6919      	ldr	r1, [r3, #16]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	4618      	mov	r0, r3
 8001996:	4603      	mov	r3, r0
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4403      	add	r3, r0
 800199c:	409a      	lsls	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d824      	bhi.n	80019f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	3b05      	subs	r3, #5
 80019c0:	221f      	movs	r2, #31
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	400a      	ands	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	3b05      	subs	r3, #5
 80019ea:	fa00 f203 	lsl.w	r2, r0, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
 80019f6:	e04c      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	d824      	bhi.n	8001a4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b23      	subs	r3, #35	; 0x23
 8001a12:	221f      	movs	r2, #31
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43da      	mvns	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	400a      	ands	r2, r1
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4618      	mov	r0, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3b23      	subs	r3, #35	; 0x23
 8001a3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
 8001a48:	e023      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	3b41      	subs	r3, #65	; 0x41
 8001a5c:	221f      	movs	r2, #31
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43da      	mvns	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	400a      	ands	r2, r1
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	3b41      	subs	r3, #65	; 0x41
 8001a86:	fa00 f203 	lsl.w	r2, r0, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <HAL_ADC_ConfigChannel+0x234>)
 8001a94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <HAL_ADC_ConfigChannel+0x238>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d109      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1cc>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b12      	cmp	r3, #18
 8001aa6:	d105      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_ADC_ConfigChannel+0x238>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d123      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x21e>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d003      	beq.n	8001ace <HAL_ADC_ConfigChannel+0x1e6>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b11      	cmp	r3, #17
 8001acc:	d11b      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d111      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_ADC_ConfigChannel+0x23c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <HAL_ADC_ConfigChannel+0x240>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	0c9a      	lsrs	r2, r3, #18
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001af8:	e002      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f9      	bne.n	8001afa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40012300 	.word	0x40012300
 8001b20:	40012000 	.word	0x40012000
 8001b24:	20000004 	.word	0x20000004
 8001b28:	431bde83 	.word	0x431bde83

08001b2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b34:	4b79      	ldr	r3, [pc, #484]	; (8001d1c <ADC_Init+0x1f0>)
 8001b36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	021a      	lsls	r2, r3, #8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6899      	ldr	r1, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <ADC_Init+0x1f4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d022      	beq.n	8001c0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6899      	ldr	r1, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	e00f      	b.n	8001c2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0202 	bic.w	r2, r2, #2
 8001c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6899      	ldr	r1, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7e1b      	ldrb	r3, [r3, #24]
 8001c44:	005a      	lsls	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01b      	beq.n	8001c90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6859      	ldr	r1, [r3, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	3b01      	subs	r3, #1
 8001c84:	035a      	lsls	r2, r3, #13
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	e007      	b.n	8001ca0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	051a      	lsls	r2, r3, #20
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6899      	ldr	r1, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ce2:	025a      	lsls	r2, r3, #9
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6899      	ldr	r1, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	029a      	lsls	r2, r3, #10
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	609a      	str	r2, [r3, #8]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40012300 	.word	0x40012300
 8001d20:	0f000001 	.word	0x0f000001

08001d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d56:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60d3      	str	r3, [r2, #12]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff29 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff3e 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff8e 	bl	8001e18 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff5d 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff31 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa2 	bl	8001e80 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e16b      	b.n	800223c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 815a 	bne.w	8002236 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d005      	beq.n	8001f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d130      	bne.n	8001ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0201 	and.w	r2, r3, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b03      	cmp	r3, #3
 8002006:	d017      	beq.n	8002038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80b4 	beq.w	8002236 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b60      	ldr	r3, [pc, #384]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a5f      	ldr	r2, [pc, #380]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_GPIO_Init+0x30c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a5b      	ldr	r2, [pc, #364]	; (8002258 <HAL_GPIO_Init+0x310>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a52      	ldr	r2, [pc, #328]	; (800225c <HAL_GPIO_Init+0x314>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <HAL_GPIO_Init+0x226>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_GPIO_Init+0x318>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d025      	beq.n	800216a <HAL_GPIO_Init+0x222>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a50      	ldr	r2, [pc, #320]	; (8002264 <HAL_GPIO_Init+0x31c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01f      	beq.n	8002166 <HAL_GPIO_Init+0x21e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4f      	ldr	r2, [pc, #316]	; (8002268 <HAL_GPIO_Init+0x320>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x21a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4e      	ldr	r2, [pc, #312]	; (800226c <HAL_GPIO_Init+0x324>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x216>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a4d      	ldr	r2, [pc, #308]	; (8002270 <HAL_GPIO_Init+0x328>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x212>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4c      	ldr	r2, [pc, #304]	; (8002274 <HAL_GPIO_Init+0x32c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x20e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4b      	ldr	r2, [pc, #300]	; (8002278 <HAL_GPIO_Init+0x330>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x20a>
 800214e:	2307      	movs	r3, #7
 8002150:	e00e      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002152:	2308      	movs	r3, #8
 8002154:	e00c      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002156:	2306      	movs	r3, #6
 8002158:	e00a      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800215a:	2305      	movs	r3, #5
 800215c:	e008      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800215e:	2304      	movs	r3, #4
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002162:	2303      	movs	r3, #3
 8002164:	e004      	b.n	8002170 <HAL_GPIO_Init+0x228>
 8002166:	2302      	movs	r3, #2
 8002168:	e002      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_GPIO_Init+0x228>
 800216e:	2300      	movs	r3, #0
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f002 0203 	and.w	r2, r2, #3
 8002176:	0092      	lsls	r2, r2, #2
 8002178:	4093      	lsls	r3, r2
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002180:	4935      	ldr	r1, [pc, #212]	; (8002258 <HAL_GPIO_Init+0x310>)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_GPIO_Init+0x334>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b2:	4a32      	ldr	r2, [pc, #200]	; (800227c <HAL_GPIO_Init+0x334>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_GPIO_Init+0x334>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_GPIO_Init+0x334>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_GPIO_Init+0x334>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_GPIO_Init+0x334>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_GPIO_Init+0x334>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002230:	4a12      	ldr	r2, [pc, #72]	; (800227c <HAL_GPIO_Init+0x334>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	f67f ae90 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800
 8002258:	40013800 	.word	0x40013800
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40020800 	.word	0x40020800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40021000 	.word	0x40021000
 8002270:	40021400 	.word	0x40021400
 8002274:	40021800 	.word	0x40021800
 8002278:	40021c00 	.word	0x40021c00
 800227c:	40013c00 	.word	0x40013c00

08002280 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002282:	b08f      	sub	sp, #60	; 0x3c
 8002284:	af0a      	add	r7, sp, #40	; 0x28
 8002286:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e10f      	b.n	80024b2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f005 fd07 	bl	8007cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2203      	movs	r2, #3
 80022b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 ffd8 	bl	8004286 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	687e      	ldr	r6, [r7, #4]
 80022de:	466d      	mov	r5, sp
 80022e0:	f106 0410 	add.w	r4, r6, #16
 80022e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022f4:	1d33      	adds	r3, r6, #4
 80022f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022f8:	6838      	ldr	r0, [r7, #0]
 80022fa:	f001 feaf 	bl	800405c <USB_CoreInit>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f001 ffc6 	bl	80042a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e04a      	b.n	80023b8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	333d      	adds	r3, #61	; 0x3d
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	333c      	adds	r3, #60	; 0x3c
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	b298      	uxth	r0, r3
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3344      	adds	r3, #68	; 0x44
 800235e:	4602      	mov	r2, r0
 8002360:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3340      	adds	r3, #64	; 0x40
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3348      	adds	r3, #72	; 0x48
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	334c      	adds	r3, #76	; 0x4c
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3354      	adds	r3, #84	; 0x54
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	3301      	adds	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3af      	bcc.n	8002322 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	e044      	b.n	8002452 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	3301      	adds	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	7bfa      	ldrb	r2, [r7, #15]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	429a      	cmp	r2, r3
 800245a:	d3b5      	bcc.n	80023c8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	687e      	ldr	r6, [r7, #4]
 8002464:	466d      	mov	r5, sp
 8002466:	f106 0410 	add.w	r4, r6, #16
 800246a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002472:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002476:	e885 0003 	stmia.w	r5, {r0, r1}
 800247a:	1d33      	adds	r3, r6, #4
 800247c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800247e:	6838      	ldr	r0, [r7, #0]
 8002480:	f001 ff5e 	bl	8004340 <USB_DevInit>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00d      	b.n	80024b2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 f8ad 	bl	800560a <USB_DevDisconnect>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d101      	bne.n	80024d6 <HAL_PCD_Start+0x1c>
 80024d2:	2302      	movs	r3, #2
 80024d4:	e020      	b.n	8002518 <HAL_PCD_Start+0x5e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d109      	bne.n	80024fa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d005      	beq.n	80024fa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f001 feb0 	bl	8004264 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 f85d 	bl	80055c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b08d      	sub	sp, #52	; 0x34
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 f91b 	bl	8005772 <USB_GetMode>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 848a 	bne.w	8002e58 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f003 f87f 	bl	800564c <USB_ReadInterrupts>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8480 	beq.w	8002e56 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f003 f86c 	bl	800564c <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b02      	cmp	r3, #2
 800257c:	d107      	bne.n	800258e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f002 0202 	and.w	r2, r2, #2
 800258c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 f85a 	bl	800564c <USB_ReadInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d161      	bne.n	8002666 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699a      	ldr	r2, [r3, #24]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0210 	bic.w	r2, r2, #16
 80025b0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f003 020f 	and.w	r2, r3, #15
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	3304      	adds	r3, #4
 80025d0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	0c5b      	lsrs	r3, r3, #17
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d124      	bne.n	8002628 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d035      	beq.n	8002656 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	6a38      	ldr	r0, [r7, #32]
 80025fe:	f002 fe91 	bl	8005324 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260e:	441a      	add	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002620:	441a      	add	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	621a      	str	r2, [r3, #32]
 8002626:	e016      	b.n	8002656 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	0c5b      	lsrs	r3, r3, #17
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	2b06      	cmp	r3, #6
 8002632:	d110      	bne.n	8002656 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800263a:	2208      	movs	r2, #8
 800263c:	4619      	mov	r1, r3
 800263e:	6a38      	ldr	r0, [r7, #32]
 8002640:	f002 fe70 	bl	8005324 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002650:	441a      	add	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0210 	orr.w	r2, r2, #16
 8002664:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f002 ffee 	bl	800564c <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002676:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800267a:	f040 80a7 	bne.w	80027cc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fff3 	bl	8005672 <USB_ReadDevAllOutEpInterrupt>
 800268c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800268e:	e099      	b.n	80027c4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 808e 	beq.w	80027b8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 f817 	bl	80056da <USB_ReadDevOutEPInterrupt>
 80026ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00c      	beq.n	80026d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	461a      	mov	r2, r3
 80026c6:	2301      	movs	r3, #1
 80026c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fec3 	bl	8003458 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	015a      	lsls	r2, r3, #5
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e8:	461a      	mov	r2, r3
 80026ea:	2308      	movs	r3, #8
 80026ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 ff99 	bl	8003628 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800270c:	461a      	mov	r2, r3
 800270e:	2310      	movs	r3, #16
 8002710:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d030      	beq.n	800277e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d109      	bne.n	800273c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800273c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	3304      	adds	r3, #4
 8002750:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	78db      	ldrb	r3, [r3, #3]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d108      	bne.n	800276c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4619      	mov	r1, r3
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f005 fbb0 	bl	8007ecc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002778:	461a      	mov	r2, r3
 800277a:	2302      	movs	r3, #2
 800277c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002794:	461a      	mov	r2, r3
 8002796:	2320      	movs	r3, #32
 8002798:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b0:	461a      	mov	r2, r3
 80027b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	3301      	adds	r3, #1
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f47f af62 	bne.w	8002690 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 ff3b 	bl	800564c <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027e0:	f040 80db 	bne.w	800299a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 ff5c 	bl	80056a6 <USB_ReadDevAllInEpInterrupt>
 80027ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027f4:	e0cd      	b.n	8002992 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80c2 	beq.w	8002986 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f002 ff82 	bl	8005716 <USB_ReadDevInEPInterrupt>
 8002812:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d057      	beq.n	80028ce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	2201      	movs	r2, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43db      	mvns	r3, r3
 8002838:	69f9      	ldr	r1, [r7, #28]
 800283a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800283e:	4013      	ands	r3, r2
 8002840:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	4413      	add	r3, r2
 800284a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800284e:	461a      	mov	r2, r3
 8002850:	2301      	movs	r3, #1
 8002852:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d132      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	334c      	adds	r3, #76	; 0x4c
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	4613      	mov	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4403      	add	r3, r0
 800287c:	3348      	adds	r3, #72	; 0x48
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4419      	add	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4403      	add	r3, r0
 8002890:	334c      	adds	r3, #76	; 0x4c
 8002892:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d113      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x3a2>
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3354      	adds	r3, #84	; 0x54
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d108      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028ba:	461a      	mov	r2, r3
 80028bc:	2101      	movs	r1, #1
 80028be:	f002 ff89 	bl	80057d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f005 fa7a 	bl	8007dc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e4:	461a      	mov	r2, r3
 80028e6:	2308      	movs	r3, #8
 80028e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002900:	461a      	mov	r2, r3
 8002902:	2310      	movs	r3, #16
 8002904:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800291c:	461a      	mov	r2, r3
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d023      	beq.n	8002974 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800292c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800292e:	6a38      	ldr	r0, [r7, #32]
 8002930:	f001 fe6a 	bl	8004608 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	3338      	adds	r3, #56	; 0x38
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	78db      	ldrb	r3, [r3, #3]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d108      	bne.n	8002962 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2200      	movs	r2, #0
 8002954:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f005 fac7 	bl	8007ef0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	015a      	lsls	r2, r3, #5
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800296e:	461a      	mov	r2, r3
 8002970:	2302      	movs	r3, #2
 8002972:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800297e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fcdb 	bl	800333c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	3301      	adds	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	085b      	lsrs	r3, r3, #1
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	f47f af2e 	bne.w	80027f6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fe54 	bl	800564c <USB_ReadInterrupts>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029ae:	d122      	bne.n	80029f6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029be:	f023 0301 	bic.w	r3, r3, #1
 80029c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d108      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029d6:	2100      	movs	r1, #0
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fec3 	bl	8003764 <HAL_PCDEx_LPM_Callback>
 80029de:	e002      	b.n	80029e6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f005 fa65 	bl	8007eb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f002 fe26 	bl	800564c <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a0a:	d112      	bne.n	8002a32 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d102      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f005 fa21 	bl	8007e64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a30:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f002 fe08 	bl	800564c <USB_ReadInterrupts>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	f040 80b7 	bne.w	8002bb8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2110      	movs	r1, #16
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 fdcf 	bl	8004608 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6e:	e046      	b.n	8002afe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	0151      	lsls	r1, r2, #5
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	440a      	add	r2, r1
 8002a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002aa2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ab6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac8:	0151      	lsls	r1, r2, #5
 8002aca:	69fa      	ldr	r2, [r7, #28]
 8002acc:	440a      	add	r2, r1
 8002ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ad2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ad6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ae8:	0151      	lsls	r1, r2, #5
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	440a      	add	r2, r1
 8002aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002af2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002af6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	3301      	adds	r3, #1
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d3b3      	bcc.n	8002a70 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d016      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b34:	f043 030b 	orr.w	r3, r3, #11
 8002b38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4a:	f043 030b 	orr.w	r3, r3, #11
 8002b4e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b50:	e015      	b.n	8002b7e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b64:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b68:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b78:	f043 030b 	orr.w	r3, r3, #11
 8002b7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f002 fe16 	bl	80057d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695a      	ldr	r2, [r3, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f002 fd45 	bl	800564c <USB_ReadInterrupts>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bcc:	d124      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fddb 	bl	800578e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 fd90 	bl	8004702 <USB_GetDevSpeed>
 8002be2:	4603      	mov	r3, r0
 8002be4:	461a      	mov	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681c      	ldr	r4, [r3, #0]
 8002bee:	f001 fa29 	bl	8004044 <HAL_RCC_GetHCLKFreq>
 8002bf2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f001 fa8f 	bl	8004120 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f005 f905 	bl	8007e12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f002 fd15 	bl	800564c <USB_ReadInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d10a      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f005 f8e2 	bl	8007df6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f002 0208 	and.w	r2, r2, #8
 8002c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fd00 	bl	800564c <USB_ReadInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d122      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c62:	2301      	movs	r3, #1
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
 8002c66:	e014      	b.n	8002c92 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d105      	bne.n	8002c8c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fb27 	bl	80032da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	3301      	adds	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3e5      	bcc.n	8002c68 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f002 fcd3 	bl	800564c <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb0:	d13b      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	e02b      	b.n	8002d10 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	3340      	adds	r3, #64	; 0x40
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d115      	bne.n	8002d0a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002cde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	da12      	bge.n	8002d0a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	333f      	adds	r3, #63	; 0x3f
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fae8 	bl	80032da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d3ce      	bcc.n	8002cb8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fc8c 	bl	800564c <USB_ReadInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d3e:	d155      	bne.n	8002dec <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d40:	2301      	movs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
 8002d44:	e045      	b.n	8002dd2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d12e      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da2b      	bge.n	8002dcc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d80:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d121      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc8:	6053      	str	r3, [r2, #4]
            break;
 8002dca:	e007      	b.n	8002ddc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	3301      	adds	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d3b4      	bcc.n	8002d46 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fc2b 	bl	800564c <USB_ReadInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e00:	d10a      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f005 f886 	bl	8007f14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fc15 	bl	800564c <USB_ReadInterrupts>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d115      	bne.n	8002e58 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f005 f876 	bl	8007f30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	e000      	b.n	8002e58 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e56:	bf00      	nop
    }
  }
}
 8002e58:	3734      	adds	r7, #52	; 0x34
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}

08002e5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_PCD_SetAddress+0x1a>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e013      	b.n	8002ea0 <HAL_PCD_SetAddress+0x42>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 fb73 	bl	800557c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	70fb      	strb	r3, [r7, #3]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	803b      	strh	r3, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da0f      	bge.n	8002eee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 020f 	and.w	r2, r3, #15
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	3338      	adds	r3, #56	; 0x38
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	705a      	strb	r2, [r3, #1]
 8002eec:	e00f      	b.n	8002f0e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	3304      	adds	r3, #4
 8002f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f1a:	883a      	ldrh	r2, [r7, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	78ba      	ldrb	r2, [r7, #2]
 8002f24:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	785b      	ldrb	r3, [r3, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f38:	78bb      	ldrb	r3, [r7, #2]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d102      	bne.n	8002f44 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_PCD_EP_Open+0xaa>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e00e      	b.n	8002f70 <HAL_PCD_EP_Open+0xc8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 fbf3 	bl	800474c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	da0f      	bge.n	8002fac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f003 020f 	and.w	r2, r3, #15
 8002f92:	4613      	mov	r3, r2
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	3338      	adds	r3, #56	; 0x38
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	705a      	strb	r2, [r3, #1]
 8002faa:	e00f      	b.n	8002fcc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_PCD_EP_Close+0x6e>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e00e      	b.n	8003004 <HAL_PCD_EP_Close+0x8c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68f9      	ldr	r1, [r7, #12]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fc31 	bl	800485c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	460b      	mov	r3, r1
 800301a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	f003 020f 	and.w	r2, r3, #15
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2200      	movs	r2, #0
 8003046:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2200      	movs	r2, #0
 800304c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	b2da      	uxtb	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003068:	7afb      	ldrb	r3, [r7, #11]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	f001 ff10 	bl	8004ea4 <USB_EP0StartXfer>
 8003084:	e008      	b.n	8003098 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	f001 fcbe 	bl	8004a14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	460b      	mov	r3, r1
 80030ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80030c4:	681b      	ldr	r3, [r3, #0]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	460b      	mov	r3, r1
 80030e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e2:	7afb      	ldrb	r3, [r7, #11]
 80030e4:	f003 020f 	and.w	r2, r3, #15
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	3338      	adds	r3, #56	; 0x38
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2201      	movs	r2, #1
 8003110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003112:	7afb      	ldrb	r3, [r7, #11]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	b2da      	uxtb	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6818      	ldr	r0, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	461a      	mov	r2, r3
 8003142:	6979      	ldr	r1, [r7, #20]
 8003144:	f001 feae 	bl	8004ea4 <USB_EP0StartXfer>
 8003148:	e008      	b.n	800315c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	f001 fc5c 	bl	8004a14 <USB_EPStartXfer>
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	f003 020f 	and.w	r2, r3, #15
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	d901      	bls.n	8003184 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e050      	b.n	8003226 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003188:	2b00      	cmp	r3, #0
 800318a:	da0f      	bge.n	80031ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	3338      	adds	r3, #56	; 0x38
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	3304      	adds	r3, #4
 80031a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	705a      	strb	r2, [r3, #1]
 80031aa:	e00d      	b.n	80031c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	4613      	mov	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	3304      	adds	r3, #4
 80031c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_PCD_EP_SetStall+0x82>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e01e      	b.n	8003226 <HAL_PCD_EP_SetStall+0xc0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68f9      	ldr	r1, [r7, #12]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f002 f8ec 	bl	80053d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	b2d9      	uxtb	r1, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003216:	461a      	mov	r2, r3
 8003218:	f002 fadc 	bl	80057d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 020f 	and.w	r2, r3, #15
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d901      	bls.n	800324c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e042      	b.n	80032d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800324c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003250:	2b00      	cmp	r3, #0
 8003252:	da0f      	bge.n	8003274 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	f003 020f 	and.w	r2, r3, #15
 800325a:	4613      	mov	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	3338      	adds	r3, #56	; 0x38
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	3304      	adds	r3, #4
 800326a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	705a      	strb	r2, [r3, #1]
 8003272:	e00f      	b.n	8003294 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	f003 020f 	and.w	r2, r3, #15
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_PCD_EP_ClrStall+0x86>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e00e      	b.n	80032d2 <HAL_PCD_EP_ClrStall+0xa4>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68f9      	ldr	r1, [r7, #12]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 f8f4 	bl	80054b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da0c      	bge.n	8003308 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	3338      	adds	r3, #56	; 0x38
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	3304      	adds	r3, #4
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e00c      	b.n	8003322 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	f003 020f 	and.w	r2, r3, #15
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	3304      	adds	r3, #4
 8003320:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	4618      	mov	r0, r3
 800332a:	f001 ff13 	bl	8005154 <USB_EPStopXfer>
 800332e:	4603      	mov	r3, r0
 8003330:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003332:	7afb      	ldrb	r3, [r7, #11]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08a      	sub	sp, #40	; 0x28
 8003340:	af02      	add	r7, sp, #8
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	3338      	adds	r3, #56	; 0x38
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	3304      	adds	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1a      	ldr	r2, [r3, #32]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	429a      	cmp	r2, r3
 800336e:	d901      	bls.n	8003374 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e06c      	b.n	800344e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	429a      	cmp	r2, r3
 8003388:	d902      	bls.n	8003390 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3303      	adds	r3, #3
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003398:	e02b      	b.n	80033f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d902      	bls.n	80033b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3303      	adds	r3, #3
 80033ba:	089b      	lsrs	r3, r3, #2
 80033bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	4603      	mov	r3, r0
 80033d4:	6978      	ldr	r0, [r7, #20]
 80033d6:	f001 ff67 	bl	80052a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	441a      	add	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1a      	ldr	r2, [r3, #32]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	441a      	add	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	b29b      	uxth	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	429a      	cmp	r2, r3
 8003406:	d809      	bhi.n	800341c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003410:	429a      	cmp	r2, r3
 8003412:	d203      	bcs.n	800341c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1be      	bne.n	800339a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	699a      	ldr	r2, [r3, #24]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	429a      	cmp	r2, r3
 8003426:	d811      	bhi.n	800344c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	2201      	movs	r2, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	43db      	mvns	r3, r3
 8003442:	6939      	ldr	r1, [r7, #16]
 8003444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003448:	4013      	ands	r3, r2
 800344a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	333c      	adds	r3, #60	; 0x3c
 8003470:	3304      	adds	r3, #4
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d17b      	bne.n	8003586 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d015      	beq.n	80034c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4a61      	ldr	r2, [pc, #388]	; (8003620 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	f240 80b9 	bls.w	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80b3 	beq.w	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ba:	461a      	mov	r2, r3
 80034bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034c0:	6093      	str	r3, [r2, #8]
 80034c2:	e0a7      	b.n	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034da:	461a      	mov	r2, r3
 80034dc:	2320      	movs	r3, #32
 80034de:	6093      	str	r3, [r2, #8]
 80034e0:	e098      	b.n	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f040 8093 	bne.w	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	4a4b      	ldr	r2, [pc, #300]	; (8003620 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d90f      	bls.n	8003516 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	e07e      	b.n	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	4413      	add	r3, r2
 8003528:	3304      	adds	r3, #4
 800352a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	0159      	lsls	r1, r3, #5
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	440b      	add	r3, r1
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003542:	1ad2      	subs	r2, r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d114      	bne.n	8003578 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003560:	461a      	mov	r2, r3
 8003562:	2101      	movs	r1, #1
 8003564:	f002 f936 	bl	80057d4 <USB_EP0_OutStart>
 8003568:	e006      	b.n	8003578 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	441a      	add	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4619      	mov	r1, r3
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f004 fc04 	bl	8007d8c <HAL_PCD_DataOutStageCallback>
 8003584:	e046      	b.n	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d124      	bne.n	80035d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	e032      	b.n	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c4:	461a      	mov	r2, r3
 80035c6:	2320      	movs	r3, #32
 80035c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f004 fbdb 	bl	8007d8c <HAL_PCD_DataOutStageCallback>
 80035d6:	e01d      	b.n	8003614 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d114      	bne.n	8003608 <PCD_EP_OutXfrComplete_int+0x1b0>
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d108      	bne.n	8003608 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003600:	461a      	mov	r2, r3
 8003602:	2100      	movs	r1, #0
 8003604:	f002 f8e6 	bl	80057d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	4619      	mov	r1, r3
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f004 fbbc 	bl	8007d8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	4f54300a 	.word	0x4f54300a
 8003624:	4f54310a 	.word	0x4f54310a

08003628 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	333c      	adds	r3, #60	; 0x3c
 8003640:	3304      	adds	r3, #4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d90e      	bls.n	800367c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003664:	2b00      	cmp	r3, #0
 8003666:	d009      	beq.n	800367c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	461a      	mov	r2, r3
 8003676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800367a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f004 fb73 	bl	8007d68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d90c      	bls.n	80036a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d108      	bne.n	80036a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800369c:	461a      	mov	r2, r3
 800369e:	2101      	movs	r1, #1
 80036a0:	f002 f898 	bl	80057d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	4f54300a 	.word	0x4f54300a

080036b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
 80036c0:	4613      	mov	r3, r2
 80036c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036d2:	883b      	ldrh	r3, [r7, #0]
 80036d4:	0419      	lsls	r1, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	430a      	orrs	r2, r1
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
 80036e0:	e028      	b.n	8003734 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	4413      	add	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	e00d      	b.n	8003712 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	3340      	adds	r3, #64	; 0x40
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4413      	add	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	3301      	adds	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	78fb      	ldrb	r3, [r7, #3]
 8003716:	3b01      	subs	r3, #1
 8003718:	429a      	cmp	r2, r3
 800371a:	d3ec      	bcc.n	80036f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800371c:	883b      	ldrh	r3, [r7, #0]
 800371e:	0418      	lsls	r0, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	78fb      	ldrb	r3, [r7, #3]
 8003726:	3b01      	subs	r3, #1
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	4302      	orrs	r2, r0
 800372c:	3340      	adds	r3, #64	; 0x40
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	460b      	mov	r3, r1
 800374c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	887a      	ldrh	r2, [r7, #2]
 8003754:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e267      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d075      	beq.n	8003886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800379a:	4b88      	ldr	r3, [pc, #544]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d00c      	beq.n	80037c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a6:	4b85      	ldr	r3, [pc, #532]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d112      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b2:	4b82      	ldr	r3, [pc, #520]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037be:	d10b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b7e      	ldr	r3, [pc, #504]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05b      	beq.n	8003884 <HAL_RCC_OscConfig+0x108>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d157      	bne.n	8003884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e242      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x74>
 80037e2:	4b76      	ldr	r3, [pc, #472]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a75      	ldr	r2, [pc, #468]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x98>
 80037fa:	4b70      	ldr	r3, [pc, #448]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6f      	ldr	r2, [pc, #444]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b6d      	ldr	r3, [pc, #436]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6c      	ldr	r2, [pc, #432]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 8003814:	4b69      	ldr	r3, [pc, #420]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a68      	ldr	r2, [pc, #416]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b66      	ldr	r3, [pc, #408]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a65      	ldr	r2, [pc, #404]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fd fe46 	bl	80014c4 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800383c:	f7fd fe42 	bl	80014c4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e207      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b5b      	ldr	r3, [pc, #364]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xc0>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385c:	f7fd fe32 	bl	80014c4 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003864:	f7fd fe2e 	bl	80014c4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e1f3      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	4b51      	ldr	r3, [pc, #324]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0xe8>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d063      	beq.n	800395a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003892:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d11c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038aa:	4b44      	ldr	r3, [pc, #272]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d116      	bne.n	80038e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b6:	4b41      	ldr	r3, [pc, #260]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_RCC_OscConfig+0x152>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e1c7      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ce:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4937      	ldr	r1, [pc, #220]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	e03a      	b.n	800395a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ec:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_RCC_OscConfig+0x244>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fd fde7 	bl	80014c4 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fa:	f7fd fde3 	bl	80014c4 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e1a8      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390c:	4b2b      	ldr	r3, [pc, #172]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003918:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4925      	ldr	r1, [pc, #148]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003928:	4313      	orrs	r3, r2
 800392a:	600b      	str	r3, [r1, #0]
 800392c:	e015      	b.n	800395a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <HAL_RCC_OscConfig+0x244>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fd fdc6 	bl	80014c4 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393c:	f7fd fdc2 	bl	80014c4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e187      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d036      	beq.n	80039d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d016      	beq.n	800399c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <HAL_RCC_OscConfig+0x248>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd fda6 	bl	80014c4 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800397c:	f7fd fda2 	bl	80014c4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e167      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCC_OscConfig+0x240>)
 8003990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x200>
 800399a:	e01b      	b.n	80039d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_OscConfig+0x248>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fd fd8f 	bl	80014c4 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a8:	e00e      	b.n	80039c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039aa:	f7fd fd8b 	bl	80014c4 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d907      	bls.n	80039c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e150      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
 80039bc:	40023800 	.word	0x40023800
 80039c0:	42470000 	.word	0x42470000
 80039c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	4b88      	ldr	r3, [pc, #544]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 80039ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ea      	bne.n	80039aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8097 	beq.w	8003b10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e6:	4b81      	ldr	r3, [pc, #516]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10f      	bne.n	8003a12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	4b7d      	ldr	r3, [pc, #500]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a7c      	ldr	r2, [pc, #496]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
 8003a02:	4b7a      	ldr	r3, [pc, #488]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a12:	4b77      	ldr	r3, [pc, #476]	; (8003bf0 <HAL_RCC_OscConfig+0x474>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d118      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1e:	4b74      	ldr	r3, [pc, #464]	; (8003bf0 <HAL_RCC_OscConfig+0x474>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a73      	ldr	r2, [pc, #460]	; (8003bf0 <HAL_RCC_OscConfig+0x474>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2a:	f7fd fd4b 	bl	80014c4 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a32:	f7fd fd47 	bl	80014c4 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e10c      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	4b6a      	ldr	r3, [pc, #424]	; (8003bf0 <HAL_RCC_OscConfig+0x474>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x2ea>
 8003a58:	4b64      	ldr	r3, [pc, #400]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a63      	ldr	r2, [pc, #396]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
 8003a64:	e01c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x324>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x30c>
 8003a6e:	4b5f      	ldr	r3, [pc, #380]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a5e      	ldr	r2, [pc, #376]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7a:	4b5c      	ldr	r3, [pc, #368]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a5b      	ldr	r2, [pc, #364]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x324>
 8003a88:	4b58      	ldr	r3, [pc, #352]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a57      	ldr	r2, [pc, #348]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
 8003a94:	4b55      	ldr	r3, [pc, #340]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a54      	ldr	r2, [pc, #336]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 0304 	bic.w	r3, r3, #4
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d015      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fd fd0c 	bl	80014c4 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fd fd08 	bl	80014c4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0cb      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	4b49      	ldr	r3, [pc, #292]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0ee      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x334>
 8003ad2:	e014      	b.n	8003afe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad4:	f7fd fcf6 	bl	80014c4 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fd fcf2 	bl	80014c4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0b5      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	4b3e      	ldr	r3, [pc, #248]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ee      	bne.n	8003adc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	4a38      	ldr	r2, [pc, #224]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80a1 	beq.w	8003c5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b1a:	4b34      	ldr	r3, [pc, #208]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d05c      	beq.n	8003be0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d141      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2e:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_RCC_OscConfig+0x478>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fd fcc6 	bl	80014c4 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fd fcc2 	bl	80014c4 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e087      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	3b01      	subs	r3, #1
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	491b      	ldr	r1, [pc, #108]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x478>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fd fc9b 	bl	80014c4 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fd fc97 	bl	80014c4 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e05c      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x416>
 8003bb0:	e054      	b.n	8003c5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b10      	ldr	r3, [pc, #64]	; (8003bf4 <HAL_RCC_OscConfig+0x478>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fc84 	bl	80014c4 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fd fc80 	bl	80014c4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e045      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCC_OscConfig+0x470>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x444>
 8003bde:	e03d      	b.n	8003c5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e038      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x4ec>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d028      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d121      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d11a      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d111      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	3b01      	subs	r3, #1
 8003c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800

08003c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0cc      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c80:	4b68      	ldr	r3, [pc, #416]	; (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d90c      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b65      	ldr	r3, [pc, #404]	; (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b63      	ldr	r3, [pc, #396]	; (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0b8      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc0:	4b59      	ldr	r3, [pc, #356]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a58      	ldr	r2, [pc, #352]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd8:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a52      	ldr	r2, [pc, #328]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b50      	ldr	r3, [pc, #320]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	494d      	ldr	r1, [pc, #308]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d044      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b47      	ldr	r3, [pc, #284]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d119      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e07f      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d003      	beq.n	8003d2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e06f      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e067      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4934      	ldr	r1, [pc, #208]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d5c:	f7fd fbb2 	bl	80014c4 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fd fbae 	bl	80014c4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e04f      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b2b      	ldr	r3, [pc, #172]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b25      	ldr	r3, [pc, #148]	; (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d20c      	bcs.n	8003db4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e032      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4916      	ldr	r1, [pc, #88]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	490e      	ldr	r1, [pc, #56]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003df2:	f000 f821 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	490a      	ldr	r1, [pc, #40]	; (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003e04:	5ccb      	ldrb	r3, [r1, r3]
 8003e06:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0a:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd fb12 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40023c00 	.word	0x40023c00
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	08008cdc 	.word	0x08008cdc
 8003e30:	20000004 	.word	0x20000004
 8003e34:	20000008 	.word	0x20000008

08003e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e3c:	b094      	sub	sp, #80	; 0x50
 8003e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	647b      	str	r3, [r7, #68]	; 0x44
 8003e44:	2300      	movs	r3, #0
 8003e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e48:	2300      	movs	r3, #0
 8003e4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e50:	4b79      	ldr	r3, [pc, #484]	; (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d00d      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x40>
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	f200 80e1 	bhi.w	8004024 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x34>
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e6a:	e0db      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4b73      	ldr	r3, [pc, #460]	; (800403c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e70:	e0db      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e72:	4b73      	ldr	r3, [pc, #460]	; (8004040 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e76:	e0d8      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e78:	4b6f      	ldr	r3, [pc, #444]	; (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e82:	4b6d      	ldr	r3, [pc, #436]	; (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d063      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8e:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	2200      	movs	r2, #0
 8003e96:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	f04f 0000 	mov.w	r0, #0
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ebc:	0150      	lsls	r0, r2, #5
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	1a51      	subs	r1, r2, r1
 8003ec6:	6139      	str	r1, [r7, #16]
 8003ec8:	4629      	mov	r1, r5
 8003eca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003edc:	4659      	mov	r1, fp
 8003ede:	018b      	lsls	r3, r1, #6
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	018a      	lsls	r2, r1, #6
 8003eea:	4651      	mov	r1, sl
 8003eec:	ebb2 0801 	subs.w	r8, r2, r1
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0a:	4690      	mov	r8, r2
 8003f0c:	4699      	mov	r9, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	eb18 0303 	adds.w	r3, r8, r3
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	462b      	mov	r3, r5
 8003f18:	eb49 0303 	adc.w	r3, r9, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	024b      	lsls	r3, r1, #9
 8003f2e:	4621      	mov	r1, r4
 8003f30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f34:	4621      	mov	r1, r4
 8003f36:	024a      	lsls	r2, r1, #9
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3e:	2200      	movs	r2, #0
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f48:	f7fc fdb8 	bl	8000abc <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4613      	mov	r3, r2
 8003f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f54:	e058      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f56:	4b38      	ldr	r3, [pc, #224]	; (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	4611      	mov	r1, r2
 8003f62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f66:	623b      	str	r3, [r7, #32]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	f04f 0000 	mov.w	r0, #0
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	0159      	lsls	r1, r3, #5
 8003f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f82:	0150      	lsls	r0, r2, #5
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4641      	mov	r1, r8
 8003f8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f8e:	4649      	mov	r1, r9
 8003f90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fa8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fac:	eb63 050b 	sbc.w	r5, r3, fp
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	00eb      	lsls	r3, r5, #3
 8003fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fbe:	00e2      	lsls	r2, r4, #3
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	4643      	mov	r3, r8
 8003fc6:	18e3      	adds	r3, r4, r3
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	464b      	mov	r3, r9
 8003fcc:	eb45 0303 	adc.w	r3, r5, r3
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fde:	4629      	mov	r1, r5
 8003fe0:	028b      	lsls	r3, r1, #10
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe8:	4621      	mov	r1, r4
 8003fea:	028a      	lsls	r2, r1, #10
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	61fa      	str	r2, [r7, #28]
 8003ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ffc:	f7fc fd5e 	bl	8000abc <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4613      	mov	r3, r2
 8004006:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	3301      	adds	r3, #1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800401a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004022:	e002      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_GetSysClockFreq+0x204>)
 8004026:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800402c:	4618      	mov	r0, r3
 800402e:	3750      	adds	r7, #80	; 0x50
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	00f42400 	.word	0x00f42400
 8004040:	007a1200 	.word	0x007a1200

08004044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_RCC_GetHCLKFreq+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000004 	.word	0x20000004

0800405c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800405c:	b084      	sub	sp, #16
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	f107 001c 	add.w	r0, r7, #28
 800406a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2b01      	cmp	r3, #1
 8004072:	d122      	bne.n	80040ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800409c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d105      	bne.n	80040ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f001 fbee 	bl	8005890 <USB_CoreReset>
 80040b4:	4603      	mov	r3, r0
 80040b6:	73fb      	strb	r3, [r7, #15]
 80040b8:	e01a      	b.n	80040f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f001 fbe2 	bl	8005890 <USB_CoreReset>
 80040cc:	4603      	mov	r3, r0
 80040ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
 80040e2:	e005      	b.n	80040f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10b      	bne.n	800410e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f043 0206 	orr.w	r2, r3, #6
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800410e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800411a:	b004      	add	sp, #16
 800411c:	4770      	bx	lr
	...

08004120 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d165      	bne.n	8004200 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a41      	ldr	r2, [pc, #260]	; (800423c <USB_SetTurnaroundTime+0x11c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d906      	bls.n	800414a <USB_SetTurnaroundTime+0x2a>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	4a40      	ldr	r2, [pc, #256]	; (8004240 <USB_SetTurnaroundTime+0x120>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d202      	bcs.n	800414a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004144:	230f      	movs	r3, #15
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e062      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4a3c      	ldr	r2, [pc, #240]	; (8004240 <USB_SetTurnaroundTime+0x120>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d306      	bcc.n	8004160 <USB_SetTurnaroundTime+0x40>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	4a3b      	ldr	r2, [pc, #236]	; (8004244 <USB_SetTurnaroundTime+0x124>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d202      	bcs.n	8004160 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800415a:	230e      	movs	r3, #14
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e057      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a38      	ldr	r2, [pc, #224]	; (8004244 <USB_SetTurnaroundTime+0x124>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d306      	bcc.n	8004176 <USB_SetTurnaroundTime+0x56>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a37      	ldr	r2, [pc, #220]	; (8004248 <USB_SetTurnaroundTime+0x128>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d202      	bcs.n	8004176 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004170:	230d      	movs	r3, #13
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e04c      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4a33      	ldr	r2, [pc, #204]	; (8004248 <USB_SetTurnaroundTime+0x128>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d306      	bcc.n	800418c <USB_SetTurnaroundTime+0x6c>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	4a32      	ldr	r2, [pc, #200]	; (800424c <USB_SetTurnaroundTime+0x12c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d802      	bhi.n	800418c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004186:	230c      	movs	r3, #12
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e041      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4a2f      	ldr	r2, [pc, #188]	; (800424c <USB_SetTurnaroundTime+0x12c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d906      	bls.n	80041a2 <USB_SetTurnaroundTime+0x82>
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4a2e      	ldr	r2, [pc, #184]	; (8004250 <USB_SetTurnaroundTime+0x130>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d802      	bhi.n	80041a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800419c:	230b      	movs	r3, #11
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e036      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <USB_SetTurnaroundTime+0x130>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d906      	bls.n	80041b8 <USB_SetTurnaroundTime+0x98>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4a29      	ldr	r2, [pc, #164]	; (8004254 <USB_SetTurnaroundTime+0x134>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d802      	bhi.n	80041b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041b2:	230a      	movs	r3, #10
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e02b      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4a26      	ldr	r2, [pc, #152]	; (8004254 <USB_SetTurnaroundTime+0x134>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d906      	bls.n	80041ce <USB_SetTurnaroundTime+0xae>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4a25      	ldr	r2, [pc, #148]	; (8004258 <USB_SetTurnaroundTime+0x138>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d202      	bcs.n	80041ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041c8:	2309      	movs	r3, #9
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e020      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4a21      	ldr	r2, [pc, #132]	; (8004258 <USB_SetTurnaroundTime+0x138>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d306      	bcc.n	80041e4 <USB_SetTurnaroundTime+0xc4>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	4a20      	ldr	r2, [pc, #128]	; (800425c <USB_SetTurnaroundTime+0x13c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d802      	bhi.n	80041e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041de:	2308      	movs	r3, #8
 80041e0:	617b      	str	r3, [r7, #20]
 80041e2:	e015      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4a1d      	ldr	r2, [pc, #116]	; (800425c <USB_SetTurnaroundTime+0x13c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d906      	bls.n	80041fa <USB_SetTurnaroundTime+0xda>
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4a1c      	ldr	r2, [pc, #112]	; (8004260 <USB_SetTurnaroundTime+0x140>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d202      	bcs.n	80041fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041f4:	2307      	movs	r3, #7
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e00a      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041fa:	2306      	movs	r3, #6
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e007      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d102      	bne.n	800420c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004206:	2309      	movs	r3, #9
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e001      	b.n	8004210 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800420c:	2309      	movs	r3, #9
 800420e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	029b      	lsls	r3, r3, #10
 8004224:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004228:	431a      	orrs	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	00d8acbf 	.word	0x00d8acbf
 8004240:	00e4e1c0 	.word	0x00e4e1c0
 8004244:	00f42400 	.word	0x00f42400
 8004248:	01067380 	.word	0x01067380
 800424c:	011a499f 	.word	0x011a499f
 8004250:	01312cff 	.word	0x01312cff
 8004254:	014ca43f 	.word	0x014ca43f
 8004258:	016e3600 	.word	0x016e3600
 800425c:	01a6ab1f 	.word	0x01a6ab1f
 8004260:	01e84800 	.word	0x01e84800

08004264 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f043 0201 	orr.w	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d115      	bne.n	80042f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042d6:	2001      	movs	r0, #1
 80042d8:	f7fd f900 	bl	80014dc <HAL_Delay>
      ms++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f001 fa45 	bl	8005772 <USB_GetMode>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d01e      	beq.n	800432c <USB_SetCurrentMode+0x84>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b31      	cmp	r3, #49	; 0x31
 80042f2:	d9f0      	bls.n	80042d6 <USB_SetCurrentMode+0x2e>
 80042f4:	e01a      	b.n	800432c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d115      	bne.n	8004328 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004308:	2001      	movs	r0, #1
 800430a:	f7fd f8e7 	bl	80014dc <HAL_Delay>
      ms++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3301      	adds	r3, #1
 8004312:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f001 fa2c 	bl	8005772 <USB_GetMode>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <USB_SetCurrentMode+0x84>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b31      	cmp	r3, #49	; 0x31
 8004324:	d9f0      	bls.n	8004308 <USB_SetCurrentMode+0x60>
 8004326:	e001      	b.n	800432c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e005      	b.n	8004338 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b32      	cmp	r3, #50	; 0x32
 8004330:	d101      	bne.n	8004336 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004340:	b084      	sub	sp, #16
 8004342:	b580      	push	{r7, lr}
 8004344:	b086      	sub	sp, #24
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800434e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	e009      	b.n	8004374 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	3340      	adds	r3, #64	; 0x40
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	2200      	movs	r2, #0
 800436c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	3301      	adds	r3, #1
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b0e      	cmp	r3, #14
 8004378:	d9f2      	bls.n	8004360 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800437a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d11c      	bne.n	80043ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438e:	f043 0302 	orr.w	r3, r3, #2
 8004392:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	639a      	str	r2, [r3, #56]	; 0x38
 80043b8:	e00b      	b.n	80043d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043d8:	461a      	mov	r2, r3
 80043da:	2300      	movs	r3, #0
 80043dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e4:	4619      	mov	r1, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ec:	461a      	mov	r2, r3
 80043ee:	680b      	ldr	r3, [r1, #0]
 80043f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d10c      	bne.n	8004412 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043fe:	2100      	movs	r1, #0
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f965 	bl	80046d0 <USB_SetDevSpeed>
 8004406:	e008      	b.n	800441a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004408:	2101      	movs	r1, #1
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f960 	bl	80046d0 <USB_SetDevSpeed>
 8004410:	e003      	b.n	800441a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004412:	2103      	movs	r1, #3
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f95b 	bl	80046d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800441a:	2110      	movs	r1, #16
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8f3 	bl	8004608 <USB_FlushTxFifo>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f91f 	bl	8004670 <USB_FlushRxFifo>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004442:	461a      	mov	r2, r3
 8004444:	2300      	movs	r3, #0
 8004446:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	461a      	mov	r2, r3
 8004450:	2300      	movs	r3, #0
 8004452:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445a:	461a      	mov	r2, r3
 800445c:	2300      	movs	r3, #0
 800445e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004460:	2300      	movs	r3, #0
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	e043      	b.n	80044ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800447c:	d118      	bne.n	80044b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004490:	461a      	mov	r2, r3
 8004492:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e013      	b.n	80044c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	461a      	mov	r2, r3
 80044a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e008      	b.n	80044c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	461a      	mov	r2, r3
 80044be:	2300      	movs	r3, #0
 80044c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ce:	461a      	mov	r2, r3
 80044d0:	2300      	movs	r3, #0
 80044d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e0:	461a      	mov	r2, r3
 80044e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	3301      	adds	r3, #1
 80044ec:	613b      	str	r3, [r7, #16]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d3b7      	bcc.n	8004466 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f6:	2300      	movs	r3, #0
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e043      	b.n	8004584 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800450e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004512:	d118      	bne.n	8004546 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10a      	bne.n	8004530 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e013      	b.n	8004558 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	461a      	mov	r2, r3
 800453e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e008      	b.n	8004558 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004552:	461a      	mov	r2, r3
 8004554:	2300      	movs	r3, #0
 8004556:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	2300      	movs	r3, #0
 8004568:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	461a      	mov	r2, r3
 8004578:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800457c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	3301      	adds	r3, #1
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	429a      	cmp	r2, r3
 800458a:	d3b7      	bcc.n	80044fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800459a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800459e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	f043 0210 	orr.w	r2, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699a      	ldr	r2, [r3, #24]
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <USB_DevInit+0x2c4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f043 0208 	orr.w	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d107      	bne.n	80045f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004600:	b004      	add	sp, #16
 8004602:	4770      	bx	lr
 8004604:	803c3800 	.word	0x803c3800

08004608 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3301      	adds	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a13      	ldr	r2, [pc, #76]	; (800466c <USB_FlushTxFifo+0x64>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e01b      	b.n	8004660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	daf2      	bge.n	8004616 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	019b      	lsls	r3, r3, #6
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	3301      	adds	r3, #1
 8004644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4a08      	ldr	r2, [pc, #32]	; (800466c <USB_FlushTxFifo+0x64>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e006      	b.n	8004660 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	d0f0      	beq.n	8004640 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	00030d40 	.word	0x00030d40

08004670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3301      	adds	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4a11      	ldr	r2, [pc, #68]	; (80046cc <USB_FlushRxFifo+0x5c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e018      	b.n	80046c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	daf2      	bge.n	800467c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2210      	movs	r2, #16
 800469e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3301      	adds	r3, #1
 80046a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a08      	ldr	r2, [pc, #32]	; (80046cc <USB_FlushRxFifo+0x5c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e006      	b.n	80046c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d0f0      	beq.n	80046a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	00030d40 	.word	0x00030d40

080046d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f0:	4313      	orrs	r3, r2
 80046f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004702:	b480      	push	{r7}
 8004704:	b087      	sub	sp, #28
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 0306 	and.w	r3, r3, #6
 800471a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004722:	2300      	movs	r3, #0
 8004724:	75fb      	strb	r3, [r7, #23]
 8004726:	e00a      	b.n	800473e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d002      	beq.n	8004734 <USB_GetDevSpeed+0x32>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b06      	cmp	r3, #6
 8004732:	d102      	bne.n	800473a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004734:	2302      	movs	r3, #2
 8004736:	75fb      	strb	r3, [r7, #23]
 8004738:	e001      	b.n	800473e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800473a:	230f      	movs	r3, #15
 800473c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800473e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004740:	4618      	mov	r0, r3
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d13a      	bne.n	80047de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	f003 030f 	and.w	r3, r3, #15
 8004778:	2101      	movs	r1, #1
 800477a:	fa01 f303 	lsl.w	r3, r1, r3
 800477e:	b29b      	uxth	r3, r3
 8004780:	68f9      	ldr	r1, [r7, #12]
 8004782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004786:	4313      	orrs	r3, r2
 8004788:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d155      	bne.n	800484c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	791b      	ldrb	r3, [r3, #4]
 80047ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	059b      	lsls	r3, r3, #22
 80047c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047c4:	4313      	orrs	r3, r2
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e036      	b.n	800484c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	2101      	movs	r1, #1
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	041b      	lsls	r3, r3, #16
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11a      	bne.n	800484c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004832:	430b      	orrs	r3, r1
 8004834:	4313      	orrs	r3, r2
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	0151      	lsls	r1, r2, #5
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	440a      	add	r2, r1
 800483e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d161      	bne.n	800493c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800488a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800488e:	d11f      	bne.n	80048d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	0151      	lsls	r1, r2, #5
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	440a      	add	r2, r1
 80048c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	2101      	movs	r1, #1
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048f0:	4013      	ands	r3, r2
 80048f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	2101      	movs	r1, #1
 8004906:	fa01 f303 	lsl.w	r3, r1, r3
 800490a:	b29b      	uxth	r3, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	68f9      	ldr	r1, [r7, #12]
 8004910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004914:	4013      	ands	r3, r2
 8004916:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	0159      	lsls	r1, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	440b      	add	r3, r1
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	4619      	mov	r1, r3
 8004934:	4b35      	ldr	r3, [pc, #212]	; (8004a0c <USB_DeactivateEndpoint+0x1b0>)
 8004936:	4013      	ands	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
 800493a:	e060      	b.n	80049fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800494e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004952:	d11f      	bne.n	8004994 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004972:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004992:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	43db      	mvns	r3, r3
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049b4:	4013      	ands	r3, r2
 80049b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	2101      	movs	r1, #1
 80049ca:	fa01 f303 	lsl.w	r3, r1, r3
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	43db      	mvns	r3, r3
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d8:	4013      	ands	r3, r2
 80049da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	0159      	lsls	r1, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	440b      	add	r3, r1
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	4619      	mov	r1, r3
 80049f8:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <USB_DeactivateEndpoint+0x1b4>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	ec337800 	.word	0xec337800
 8004a10:	eff37800 	.word	0xeff37800

08004a14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08a      	sub	sp, #40	; 0x28
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	f040 815c 	bne.w	8004cee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d132      	bne.n	8004aa4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9c:	0cdb      	lsrs	r3, r3, #19
 8004a9e:	04db      	lsls	r3, r3, #19
 8004aa0:	6113      	str	r3, [r2, #16]
 8004aa2:	e074      	b.n	8004b8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	0151      	lsls	r1, r2, #5
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	440a      	add	r2, r1
 8004aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abe:	0cdb      	lsrs	r3, r3, #19
 8004ac0:	04db      	lsls	r3, r3, #19
 8004ac2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	0151      	lsls	r1, r2, #5
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	440a      	add	r2, r1
 8004ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ade:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ae2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ae6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	440b      	add	r3, r1
 8004b00:	1e59      	subs	r1, r3, #1
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b0a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b0c:	4b9d      	ldr	r3, [pc, #628]	; (8004d84 <USB_EPStartXfer+0x370>)
 8004b0e:	400b      	ands	r3, r1
 8004b10:	69b9      	ldr	r1, [r7, #24]
 8004b12:	0148      	lsls	r0, r1, #5
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	4401      	add	r1, r0
 8004b18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b36:	69b9      	ldr	r1, [r7, #24]
 8004b38:	0148      	lsls	r0, r1, #5
 8004b3a:	69f9      	ldr	r1, [r7, #28]
 8004b3c:	4401      	add	r1, r0
 8004b3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b42:	4313      	orrs	r3, r2
 8004b44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	791b      	ldrb	r3, [r3, #4]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d11f      	bne.n	8004b8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004b8e:	79fb      	ldrb	r3, [r7, #7]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d14b      	bne.n	8004c2c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d009      	beq.n	8004bb0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d128      	bne.n	8004c0a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d110      	bne.n	8004bea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	0151      	lsls	r1, r2, #5
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	440a      	add	r2, r1
 8004bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	e00f      	b.n	8004c0a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	0151      	lsls	r1, r2, #5
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	440a      	add	r2, r1
 8004c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e133      	b.n	8004e94 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	0151      	lsls	r1, r2, #5
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	440a      	add	r2, r1
 8004c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	791b      	ldrb	r3, [r3, #4]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d015      	beq.n	8004c80 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 811b 	beq.w	8004e94 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	2101      	movs	r1, #1
 8004c70:	fa01 f303 	lsl.w	r3, r1, r3
 8004c74:	69f9      	ldr	r1, [r7, #28]
 8004c76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	634b      	str	r3, [r1, #52]	; 0x34
 8004c7e:	e109      	b.n	8004e94 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d110      	bne.n	8004cb2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	0151      	lsls	r1, r2, #5
 8004ca2:	69fa      	ldr	r2, [r7, #28]
 8004ca4:	440a      	add	r2, r1
 8004ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004caa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	e00f      	b.n	8004cd2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	6919      	ldr	r1, [r3, #16]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	781a      	ldrb	r2, [r3, #0]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	b298      	uxth	r0, r3
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 fade 	bl	80052a8 <USB_WritePacket>
 8004cec:	e0d2      	b.n	8004e94 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	0151      	lsls	r1, r2, #5
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	440a      	add	r2, r1
 8004d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d08:	0cdb      	lsrs	r3, r3, #19
 8004d0a:	04db      	lsls	r3, r3, #19
 8004d0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d30:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d126      	bne.n	8004d88 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	0148      	lsls	r0, r1, #5
 8004d54:	69f9      	ldr	r1, [r7, #28]
 8004d56:	4401      	add	r1, r0
 8004d58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	0151      	lsls	r1, r2, #5
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	440a      	add	r2, r1
 8004d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d7e:	6113      	str	r3, [r2, #16]
 8004d80:	e03a      	b.n	8004df8 <USB_EPStartXfer+0x3e4>
 8004d82:	bf00      	nop
 8004d84:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	699a      	ldr	r2, [r3, #24]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	1e5a      	subs	r2, r3, #1
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	8afa      	ldrh	r2, [r7, #22]
 8004da4:	fb03 f202 	mul.w	r2, r3, r2
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	8afb      	ldrh	r3, [r7, #22]
 8004dbc:	04d9      	lsls	r1, r3, #19
 8004dbe:	4b38      	ldr	r3, [pc, #224]	; (8004ea0 <USB_EPStartXfer+0x48c>)
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	69b9      	ldr	r1, [r7, #24]
 8004dc4:	0148      	lsls	r0, r1, #5
 8004dc6:	69f9      	ldr	r1, [r7, #28]
 8004dc8:	4401      	add	r1, r0
 8004dca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	0148      	lsls	r0, r1, #5
 8004dec:	69f9      	ldr	r1, [r7, #28]
 8004dee:	4401      	add	r1, r0
 8004df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004df4:	4313      	orrs	r3, r2
 8004df6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10d      	bne.n	8004e1a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6919      	ldr	r1, [r3, #16]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	460a      	mov	r2, r1
 8004e18:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	791b      	ldrb	r3, [r3, #4]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d128      	bne.n	8004e74 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d110      	bne.n	8004e54 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	e00f      	b.n	8004e74 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	1ff80000 	.word	0x1ff80000

08004ea4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	785b      	ldrb	r3, [r3, #1]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f040 80ce 	bne.w	8005062 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d132      	bne.n	8004f34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ef0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2c:	0cdb      	lsrs	r3, r3, #19
 8004f2e:	04db      	lsls	r3, r3, #19
 8004f30:	6113      	str	r3, [r2, #16]
 8004f32:	e04e      	b.n	8004fd2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4e:	0cdb      	lsrs	r3, r3, #19
 8004f50:	04db      	lsls	r3, r3, #19
 8004f52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004faa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc2:	6939      	ldr	r1, [r7, #16]
 8004fc4:	0148      	lsls	r0, r1, #5
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	4401      	add	r1, r0
 8004fca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004fd2:	79fb      	ldrb	r3, [r7, #7]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d11e      	bne.n	8005016 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fec:	461a      	mov	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e097      	b.n	8005146 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005034:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 8083 	beq.w	8005146 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	f003 030f 	and.w	r3, r3, #15
 8005050:	2101      	movs	r1, #1
 8005052:	fa01 f303 	lsl.w	r3, r1, r3
 8005056:	6979      	ldr	r1, [r7, #20]
 8005058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800505c:	4313      	orrs	r3, r2
 800505e:	634b      	str	r3, [r1, #52]	; 0x34
 8005060:	e071      	b.n	8005146 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507c:	0cdb      	lsrs	r3, r3, #19
 800507e:	04db      	lsls	r3, r3, #19
 8005080:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800509c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f4:	6939      	ldr	r1, [r7, #16]
 80050f6:	0148      	lsls	r0, r1, #5
 80050f8:	6979      	ldr	r1, [r7, #20]
 80050fa:	4401      	add	r1, r0
 80050fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005100:	4313      	orrs	r3, r2
 8005102:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d10d      	bne.n	8005126 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	6919      	ldr	r1, [r3, #16]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	460a      	mov	r2, r1
 8005124:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005140:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005144:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	785b      	ldrb	r3, [r3, #1]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d14a      	bne.n	8005208 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800518a:	f040 8086 	bne.w	800529a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	7812      	ldrb	r2, [r2, #0]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	7812      	ldrb	r2, [r2, #0]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f242 7210 	movw	r2, #10000	; 0x2710
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d902      	bls.n	80051ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
          break;
 80051ea:	e056      	b.n	800529a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005204:	d0e7      	beq.n	80051d6 <USB_EPStopXfer+0x82>
 8005206:	e048      	b.n	800529a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005220:	d13b      	bne.n	800529a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005244:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	7812      	ldrb	r2, [r2, #0]
 800525a:	0151      	lsls	r1, r2, #5
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	440a      	add	r2, r1
 8005260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005268:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3301      	adds	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f242 7210 	movw	r2, #10000	; 0x2710
 8005276:	4293      	cmp	r3, r2
 8005278:	d902      	bls.n	8005280 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
          break;
 800527e:	e00c      	b.n	800529a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005298:	d0e7      	beq.n	800526a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800529a:	7dfb      	ldrb	r3, [r7, #23]
}
 800529c:	4618      	mov	r0, r3
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b089      	sub	sp, #36	; 0x24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4611      	mov	r1, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	460b      	mov	r3, r1
 80052b8:	71fb      	strb	r3, [r7, #7]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d123      	bne.n	8005316 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052ce:	88bb      	ldrh	r3, [r7, #4]
 80052d0:	3303      	adds	r3, #3
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e018      	b.n	800530e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	031a      	lsls	r2, r3, #12
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e8:	461a      	mov	r2, r3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	3301      	adds	r3, #1
 8005300:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3301      	adds	r3, #1
 8005306:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	3301      	adds	r3, #1
 800530c:	61bb      	str	r3, [r7, #24]
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	429a      	cmp	r2, r3
 8005314:	d3e2      	bcc.n	80052dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3724      	adds	r7, #36	; 0x24
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005324:	b480      	push	{r7}
 8005326:	b08b      	sub	sp, #44	; 0x2c
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	089b      	lsrs	r3, r3, #2
 800533e:	b29b      	uxth	r3, r3
 8005340:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	f003 0303 	and.w	r3, r3, #3
 8005348:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800534a:	2300      	movs	r3, #0
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	e014      	b.n	800537a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	601a      	str	r2, [r3, #0]
    pDest++;
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	3301      	adds	r3, #1
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	3301      	adds	r3, #1
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	3301      	adds	r3, #1
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	3301      	adds	r3, #1
 8005372:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	3301      	adds	r3, #1
 8005378:	623b      	str	r3, [r7, #32]
 800537a:	6a3a      	ldr	r2, [r7, #32]
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	429a      	cmp	r2, r3
 8005380:	d3e6      	bcc.n	8005350 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005382:	8bfb      	ldrh	r3, [r7, #30]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01e      	beq.n	80053c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005392:	461a      	mov	r2, r3
 8005394:	f107 0310 	add.w	r3, r7, #16
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	701a      	strb	r2, [r3, #0]
      i++;
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	3301      	adds	r3, #1
 80053b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	3301      	adds	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80053ba:	8bfb      	ldrh	r3, [r7, #30]
 80053bc:	3b01      	subs	r3, #1
 80053be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053c0:	8bfb      	ldrh	r3, [r7, #30]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1ea      	bne.n	800539c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	372c      	adds	r7, #44	; 0x2c
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d12c      	bne.n	800544a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	db12      	blt.n	8005428 <USB_EPSetStall+0x54>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00f      	beq.n	8005428 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005422:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005426:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e02b      	b.n	80054a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	db12      	blt.n	8005482 <USB_EPSetStall+0xae>
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00f      	beq.n	8005482 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005480:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d128      	bne.n	800551e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	791b      	ldrb	r3, [r3, #4]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d003      	beq.n	80054fc <USB_EPClearStall+0x4c>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	791b      	ldrb	r3, [r3, #4]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d138      	bne.n	800556e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	e027      	b.n	800556e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005538:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800553c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	791b      	ldrb	r3, [r3, #4]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d003      	beq.n	800554e <USB_EPClearStall+0x9e>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	791b      	ldrb	r3, [r3, #4]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d10f      	bne.n	800556e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800559e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80055b0:	68f9      	ldr	r1, [r7, #12]
 80055b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f6:	f023 0302 	bic.w	r3, r3, #2
 80055fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005624:	f023 0303 	bic.w	r3, r3, #3
 8005628:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005638:	f043 0302 	orr.w	r3, r3, #2
 800563c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4013      	ands	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	0c1b      	lsrs	r3, r3, #16
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	b29b      	uxth	r3, r3
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3714      	adds	r7, #20
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005708:	68bb      	ldr	r3, [r7, #8]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	460b      	mov	r3, r1
 8005720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005738:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800573a:	78fb      	ldrb	r3, [r7, #3]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	fa22 f303 	lsr.w	r3, r2, r3
 8005746:	01db      	lsls	r3, r3, #7
 8005748:	b2db      	uxtb	r3, r3
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005764:	68bb      	ldr	r3, [r7, #8]
}
 8005766:	4618      	mov	r0, r3
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0301 	and.w	r3, r3, #1
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800578e:	b480      	push	{r7}
 8005790:	b085      	sub	sp, #20
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80057ac:	f023 0307 	bic.w	r3, r3, #7
 80057b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	460b      	mov	r3, r1
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	333c      	adds	r3, #60	; 0x3c
 80057ea:	3304      	adds	r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4a26      	ldr	r2, [pc, #152]	; (800588c <USB_EP0_OutStart+0xb8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d90a      	bls.n	800580e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005808:	d101      	bne.n	800580e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	e037      	b.n	800587e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005814:	461a      	mov	r2, r3
 8005816:	2300      	movs	r3, #0
 8005818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800582c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583c:	f043 0318 	orr.w	r3, r3, #24
 8005840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005850:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005854:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10f      	bne.n	800587c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	461a      	mov	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005876:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800587a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	4f54300a 	.word	0x4f54300a

08005890 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <USB_CoreReset+0x64>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e01b      	b.n	80058e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	daf2      	bge.n	800589c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f043 0201 	orr.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4a09      	ldr	r2, [pc, #36]	; (80058f4 <USB_CoreReset+0x64>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e006      	b.n	80058e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d0f0      	beq.n	80058c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	00030d40 	.word	0x00030d40

080058f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005904:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005908:	f002 fcaa 	bl	8008260 <USBD_static_malloc>
 800590c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	32b0      	adds	r2, #176	; 0xb0
 800591e:	2100      	movs	r1, #0
 8005920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005924:	2302      	movs	r3, #2
 8005926:	e0d4      	b.n	8005ad2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005928:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800592c:	2100      	movs	r1, #0
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f002 fd12 	bl	8008358 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	32b0      	adds	r2, #176	; 0xb0
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	32b0      	adds	r2, #176	; 0xb0
 800594e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	7c1b      	ldrb	r3, [r3, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d138      	bne.n	80059d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005960:	4b5e      	ldr	r3, [pc, #376]	; (8005adc <USBD_CDC_Init+0x1e4>)
 8005962:	7819      	ldrb	r1, [r3, #0]
 8005964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005968:	2202      	movs	r2, #2
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f002 fb55 	bl	800801a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005970:	4b5a      	ldr	r3, [pc, #360]	; (8005adc <USBD_CDC_Init+0x1e4>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 020f 	and.w	r2, r3, #15
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	3324      	adds	r3, #36	; 0x24
 8005986:	2201      	movs	r2, #1
 8005988:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800598a:	4b55      	ldr	r3, [pc, #340]	; (8005ae0 <USBD_CDC_Init+0x1e8>)
 800598c:	7819      	ldrb	r1, [r3, #0]
 800598e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005992:	2202      	movs	r2, #2
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f002 fb40 	bl	800801a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800599a:	4b51      	ldr	r3, [pc, #324]	; (8005ae0 <USBD_CDC_Init+0x1e8>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 020f 	and.w	r2, r3, #15
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059b2:	2201      	movs	r2, #1
 80059b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059b6:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <USBD_CDC_Init+0x1ec>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	3326      	adds	r3, #38	; 0x26
 80059cc:	2210      	movs	r2, #16
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e035      	b.n	8005a3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059d2:	4b42      	ldr	r3, [pc, #264]	; (8005adc <USBD_CDC_Init+0x1e4>)
 80059d4:	7819      	ldrb	r1, [r3, #0]
 80059d6:	2340      	movs	r3, #64	; 0x40
 80059d8:	2202      	movs	r2, #2
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f002 fb1d 	bl	800801a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059e0:	4b3e      	ldr	r3, [pc, #248]	; (8005adc <USBD_CDC_Init+0x1e4>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	f003 020f 	and.w	r2, r3, #15
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	3324      	adds	r3, #36	; 0x24
 80059f6:	2201      	movs	r2, #1
 80059f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059fa:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <USBD_CDC_Init+0x1e8>)
 80059fc:	7819      	ldrb	r1, [r3, #0]
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	2202      	movs	r2, #2
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f002 fb09 	bl	800801a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a08:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <USBD_CDC_Init+0x1e8>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 020f 	and.w	r2, r3, #15
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a20:	2201      	movs	r2, #1
 8005a22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a24:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <USBD_CDC_Init+0x1ec>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f003 020f 	and.w	r2, r3, #15
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	3326      	adds	r3, #38	; 0x26
 8005a3a:	2210      	movs	r2, #16
 8005a3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a3e:	4b29      	ldr	r3, [pc, #164]	; (8005ae4 <USBD_CDC_Init+0x1ec>)
 8005a40:	7819      	ldrb	r1, [r3, #0]
 8005a42:	2308      	movs	r3, #8
 8005a44:	2203      	movs	r2, #3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f002 fae7 	bl	800801a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <USBD_CDC_Init+0x1ec>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	f003 020f 	and.w	r2, r3, #15
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	3324      	adds	r3, #36	; 0x24
 8005a62:	2201      	movs	r2, #1
 8005a64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	33b0      	adds	r3, #176	; 0xb0
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e018      	b.n	8005ad2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7c1b      	ldrb	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005aa8:	4b0d      	ldr	r3, [pc, #52]	; (8005ae0 <USBD_CDC_Init+0x1e8>)
 8005aaa:	7819      	ldrb	r1, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f002 fb9e 	bl	80081f8 <USBD_LL_PrepareReceive>
 8005abc:	e008      	b.n	8005ad0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005abe:	4b08      	ldr	r3, [pc, #32]	; (8005ae0 <USBD_CDC_Init+0x1e8>)
 8005ac0:	7819      	ldrb	r1, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ac8:	2340      	movs	r3, #64	; 0x40
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f002 fb94 	bl	80081f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000097 	.word	0x20000097
 8005ae0:	20000098 	.word	0x20000098
 8005ae4:	20000099 	.word	0x20000099

08005ae8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005af4:	4b3a      	ldr	r3, [pc, #232]	; (8005be0 <USBD_CDC_DeInit+0xf8>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f002 fab3 	bl	8008066 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b00:	4b37      	ldr	r3, [pc, #220]	; (8005be0 <USBD_CDC_DeInit+0xf8>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	f003 020f 	and.w	r2, r3, #15
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	3324      	adds	r3, #36	; 0x24
 8005b16:	2200      	movs	r2, #0
 8005b18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b1a:	4b32      	ldr	r3, [pc, #200]	; (8005be4 <USBD_CDC_DeInit+0xfc>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f002 faa0 	bl	8008066 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b26:	4b2f      	ldr	r3, [pc, #188]	; (8005be4 <USBD_CDC_DeInit+0xfc>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	f003 020f 	and.w	r2, r3, #15
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b3e:	2200      	movs	r2, #0
 8005b40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b42:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <USBD_CDC_DeInit+0x100>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f002 fa8c 	bl	8008066 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b4e:	4b26      	ldr	r3, [pc, #152]	; (8005be8 <USBD_CDC_DeInit+0x100>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 020f 	and.w	r2, r3, #15
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	2200      	movs	r2, #0
 8005b66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b68:	4b1f      	ldr	r3, [pc, #124]	; (8005be8 <USBD_CDC_DeInit+0x100>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 020f 	and.w	r2, r3, #15
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	3326      	adds	r3, #38	; 0x26
 8005b7e:	2200      	movs	r2, #0
 8005b80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	32b0      	adds	r2, #176	; 0xb0
 8005b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d01f      	beq.n	8005bd4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	33b0      	adds	r3, #176	; 0xb0
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	32b0      	adds	r2, #176	; 0xb0
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f002 fb60 	bl	800827c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	32b0      	adds	r2, #176	; 0xb0
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000097 	.word	0x20000097
 8005be4:	20000098 	.word	0x20000098
 8005be8:	20000099 	.word	0x20000099

08005bec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	32b0      	adds	r2, #176	; 0xb0
 8005c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e0bf      	b.n	8005d9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d050      	beq.n	8005cca <USBD_CDC_Setup+0xde>
 8005c28:	2b20      	cmp	r3, #32
 8005c2a:	f040 80af 	bne.w	8005d8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	88db      	ldrh	r3, [r3, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d03a      	beq.n	8005cac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	b25b      	sxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	da1b      	bge.n	8005c78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	33b0      	adds	r3, #176	; 0xb0
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	88d2      	ldrh	r2, [r2, #6]
 8005c5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	88db      	ldrh	r3, [r3, #6]
 8005c62:	2b07      	cmp	r3, #7
 8005c64:	bf28      	it	cs
 8005c66:	2307      	movcs	r3, #7
 8005c68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	89fa      	ldrh	r2, [r7, #14]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 fd89 	bl	8007788 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005c76:	e090      	b.n	8005d9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	785a      	ldrb	r2, [r3, #1]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	88db      	ldrh	r3, [r3, #6]
 8005c86:	2b3f      	cmp	r3, #63	; 0x3f
 8005c88:	d803      	bhi.n	8005c92 <USBD_CDC_Setup+0xa6>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	88db      	ldrh	r3, [r3, #6]
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	e000      	b.n	8005c94 <USBD_CDC_Setup+0xa8>
 8005c92:	2240      	movs	r2, #64	; 0x40
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005c9a:	6939      	ldr	r1, [r7, #16]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fd9b 	bl	80077e0 <USBD_CtlPrepareRx>
      break;
 8005caa:	e076      	b.n	8005d9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	33b0      	adds	r3, #176	; 0xb0
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	7850      	ldrb	r0, [r2, #1]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	4798      	blx	r3
      break;
 8005cc8:	e067      	b.n	8005d9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	2b0b      	cmp	r3, #11
 8005cd0:	d851      	bhi.n	8005d76 <USBD_CDC_Setup+0x18a>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <USBD_CDC_Setup+0xec>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005d09 	.word	0x08005d09
 8005cdc:	08005d85 	.word	0x08005d85
 8005ce0:	08005d77 	.word	0x08005d77
 8005ce4:	08005d77 	.word	0x08005d77
 8005ce8:	08005d77 	.word	0x08005d77
 8005cec:	08005d77 	.word	0x08005d77
 8005cf0:	08005d77 	.word	0x08005d77
 8005cf4:	08005d77 	.word	0x08005d77
 8005cf8:	08005d77 	.word	0x08005d77
 8005cfc:	08005d77 	.word	0x08005d77
 8005d00:	08005d33 	.word	0x08005d33
 8005d04:	08005d5d 	.word	0x08005d5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d107      	bne.n	8005d24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d14:	f107 030a 	add.w	r3, r7, #10
 8005d18:	2202      	movs	r2, #2
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 fd33 	bl	8007788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d22:	e032      	b.n	8005d8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fcbd 	bl	80076a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	75fb      	strb	r3, [r7, #23]
          break;
 8005d30:	e02b      	b.n	8005d8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b03      	cmp	r3, #3
 8005d3c:	d107      	bne.n	8005d4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d3e:	f107 030d 	add.w	r3, r7, #13
 8005d42:	2201      	movs	r2, #1
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 fd1e 	bl	8007788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d4c:	e01d      	b.n	8005d8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fca8 	bl	80076a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d56:	2303      	movs	r3, #3
 8005d58:	75fb      	strb	r3, [r7, #23]
          break;
 8005d5a:	e016      	b.n	8005d8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d00f      	beq.n	8005d88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f001 fc9b 	bl	80076a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d70:	2303      	movs	r3, #3
 8005d72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005d74:	e008      	b.n	8005d88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f001 fc94 	bl	80076a6 <USBD_CtlError>
          ret = USBD_FAIL;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	75fb      	strb	r3, [r7, #23]
          break;
 8005d82:	e002      	b.n	8005d8a <USBD_CDC_Setup+0x19e>
          break;
 8005d84:	bf00      	nop
 8005d86:	e008      	b.n	8005d9a <USBD_CDC_Setup+0x1ae>
          break;
 8005d88:	bf00      	nop
      }
      break;
 8005d8a:	e006      	b.n	8005d9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 fc89 	bl	80076a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8005d94:	2303      	movs	r3, #3
 8005d96:	75fb      	strb	r3, [r7, #23]
      break;
 8005d98:	bf00      	nop
  }

  return (uint8_t)ret;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005db6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	32b0      	adds	r2, #176	; 0xb0
 8005dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e065      	b.n	8005e9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	32b0      	adds	r2, #176	; 0xb0
 8005dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ddc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005dde:	78fb      	ldrb	r3, [r7, #3]
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	3318      	adds	r3, #24
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d02f      	beq.n	8005e58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	f003 020f 	and.w	r2, r3, #15
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	4613      	mov	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	3318      	adds	r3, #24
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	f003 010f 	and.w	r1, r3, #15
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	460b      	mov	r3, r1
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	440b      	add	r3, r1
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4403      	add	r3, r0
 8005e20:	3348      	adds	r3, #72	; 0x48
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e28:	fb01 f303 	mul.w	r3, r1, r3
 8005e2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d112      	bne.n	8005e58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	f003 020f 	and.w	r2, r3, #15
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	3318      	adds	r3, #24
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e4a:	78f9      	ldrb	r1, [r7, #3]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f002 f9b0 	bl	80081b6 <USBD_LL_Transmit>
 8005e56:	e01f      	b.n	8005e98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	33b0      	adds	r3, #176	; 0xb0
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d010      	beq.n	8005e98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	33b0      	adds	r3, #176	; 0xb0
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	32b0      	adds	r2, #176	; 0xb0
 8005eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ebc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	32b0      	adds	r2, #176	; 0xb0
 8005ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e01a      	b.n	8005f0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ed4:	78fb      	ldrb	r3, [r7, #3]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f002 f9ae 	bl	800823a <USBD_LL_GetRxDataSize>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	33b0      	adds	r3, #176	; 0xb0
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f04:	4611      	mov	r1, r2
 8005f06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	32b0      	adds	r2, #176	; 0xb0
 8005f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e025      	b.n	8005f80 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	33b0      	adds	r3, #176	; 0xb0
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01a      	beq.n	8005f7e <USBD_CDC_EP0_RxReady+0x6c>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f4e:	2bff      	cmp	r3, #255	; 0xff
 8005f50:	d015      	beq.n	8005f7e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	33b0      	adds	r3, #176	; 0xb0
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f72:	b292      	uxth	r2, r2
 8005f74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	22ff      	movs	r2, #255	; 0xff
 8005f7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f90:	2182      	movs	r1, #130	; 0x82
 8005f92:	4818      	ldr	r0, [pc, #96]	; (8005ff4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f94:	f000 fd4f 	bl	8006a36 <USBD_GetEpDesc>
 8005f98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	4815      	ldr	r0, [pc, #84]	; (8005ff4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f9e:	f000 fd4a 	bl	8006a36 <USBD_GetEpDesc>
 8005fa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fa4:	2181      	movs	r1, #129	; 0x81
 8005fa6:	4813      	ldr	r0, [pc, #76]	; (8005ff4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fa8:	f000 fd45 	bl	8006a36 <USBD_GetEpDesc>
 8005fac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d002      	beq.n	8005fba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2210      	movs	r2, #16
 8005fb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d006      	beq.n	8005fce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc8:	711a      	strb	r2, [r3, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d006      	beq.n	8005fe2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fdc:	711a      	strb	r2, [r3, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2243      	movs	r2, #67	; 0x43
 8005fe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fe8:	4b02      	ldr	r3, [pc, #8]	; (8005ff4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000054 	.word	0x20000054

08005ff8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006000:	2182      	movs	r1, #130	; 0x82
 8006002:	4818      	ldr	r0, [pc, #96]	; (8006064 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006004:	f000 fd17 	bl	8006a36 <USBD_GetEpDesc>
 8006008:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800600a:	2101      	movs	r1, #1
 800600c:	4815      	ldr	r0, [pc, #84]	; (8006064 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800600e:	f000 fd12 	bl	8006a36 <USBD_GetEpDesc>
 8006012:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006014:	2181      	movs	r1, #129	; 0x81
 8006016:	4813      	ldr	r0, [pc, #76]	; (8006064 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006018:	f000 fd0d 	bl	8006a36 <USBD_GetEpDesc>
 800601c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2210      	movs	r2, #16
 8006028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	2200      	movs	r2, #0
 8006034:	711a      	strb	r2, [r3, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f042 0202 	orr.w	r2, r2, #2
 800603c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	711a      	strb	r2, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f042 0202 	orr.w	r2, r2, #2
 8006050:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2243      	movs	r2, #67	; 0x43
 8006056:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006058:	4b02      	ldr	r3, [pc, #8]	; (8006064 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000054 	.word	0x20000054

08006068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006070:	2182      	movs	r1, #130	; 0x82
 8006072:	4818      	ldr	r0, [pc, #96]	; (80060d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006074:	f000 fcdf 	bl	8006a36 <USBD_GetEpDesc>
 8006078:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800607a:	2101      	movs	r1, #1
 800607c:	4815      	ldr	r0, [pc, #84]	; (80060d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800607e:	f000 fcda 	bl	8006a36 <USBD_GetEpDesc>
 8006082:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006084:	2181      	movs	r1, #129	; 0x81
 8006086:	4813      	ldr	r0, [pc, #76]	; (80060d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006088:	f000 fcd5 	bl	8006a36 <USBD_GetEpDesc>
 800608c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2210      	movs	r2, #16
 8006098:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060a8:	711a      	strb	r2, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060bc:	711a      	strb	r2, [r3, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2243      	movs	r2, #67	; 0x43
 80060c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3718      	adds	r7, #24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000054 	.word	0x20000054

080060d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	220a      	movs	r2, #10
 80060e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060e6:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	20000010 	.word	0x20000010

080060f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006108:	2303      	movs	r3, #3
 800610a:	e009      	b.n	8006120 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	33b0      	adds	r3, #176	; 0xb0
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	32b0      	adds	r2, #176	; 0xb0
 8006142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006146:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800614e:	2303      	movs	r3, #3
 8006150:	e008      	b.n	8006164 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	32b0      	adds	r2, #176	; 0xb0
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006190:	2303      	movs	r3, #3
 8006192:	e004      	b.n	800619e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32b0      	adds	r2, #176	; 0xb0
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	32b0      	adds	r2, #176	; 0xb0
 80061d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80061da:	2303      	movs	r3, #3
 80061dc:	e025      	b.n	800622a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11f      	bne.n	8006228 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80061f0:	4b10      	ldr	r3, [pc, #64]	; (8006234 <USBD_CDC_TransmitPacket+0x88>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f003 020f 	and.w	r2, r3, #15
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4403      	add	r3, r0
 800620a:	3318      	adds	r3, #24
 800620c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800620e:	4b09      	ldr	r3, [pc, #36]	; (8006234 <USBD_CDC_TransmitPacket+0x88>)
 8006210:	7819      	ldrb	r1, [r3, #0]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f001 ffc9 	bl	80081b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000097 	.word	0x20000097

08006238 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32b0      	adds	r2, #176	; 0xb0
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	32b0      	adds	r2, #176	; 0xb0
 800625a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006262:	2303      	movs	r3, #3
 8006264:	e018      	b.n	8006298 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	7c1b      	ldrb	r3, [r3, #16]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10a      	bne.n	8006284 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <USBD_CDC_ReceivePacket+0x68>)
 8006270:	7819      	ldrb	r1, [r3, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 ffbb 	bl	80081f8 <USBD_LL_PrepareReceive>
 8006282:	e008      	b.n	8006296 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <USBD_CDC_ReceivePacket+0x68>)
 8006286:	7819      	ldrb	r1, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f001 ffb1 	bl	80081f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000098 	.word	0x20000098

080062a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4613      	mov	r3, r2
 80062b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e01f      	b.n	80062fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	79fa      	ldrb	r2, [r7, #7]
 80062ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f001 fe2b 	bl	8007f4c <USBD_LL_Init>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006318:	2303      	movs	r3, #3
 800631a:	e025      	b.n	8006368 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32ae      	adds	r2, #174	; 0xae
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00f      	beq.n	8006358 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	32ae      	adds	r2, #174	; 0xae
 8006342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	f107 020e 	add.w	r2, r7, #14
 800634c:	4610      	mov	r0, r2
 800634e:	4798      	blx	r3
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f001 fe33 	bl	8007fe4 <USBD_LL_Start>
 800637e:	4603      	mov	r3, r0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006390:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d009      	beq.n	80063cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	78fa      	ldrb	r2, [r7, #3]
 80063c2:	4611      	mov	r1, r2
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063e2:	2300      	movs	r3, #0
 80063e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	78fa      	ldrb	r2, [r7, #3]
 80063f0:	4611      	mov	r1, r2
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f908 	bl	8007632 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006430:	461a      	mov	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800643e:	f003 031f 	and.w	r3, r3, #31
 8006442:	2b02      	cmp	r3, #2
 8006444:	d01a      	beq.n	800647c <USBD_LL_SetupStage+0x72>
 8006446:	2b02      	cmp	r3, #2
 8006448:	d822      	bhi.n	8006490 <USBD_LL_SetupStage+0x86>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <USBD_LL_SetupStage+0x4a>
 800644e:	2b01      	cmp	r3, #1
 8006450:	d00a      	beq.n	8006468 <USBD_LL_SetupStage+0x5e>
 8006452:	e01d      	b.n	8006490 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fb5f 	bl	8006b20 <USBD_StdDevReq>
 8006462:	4603      	mov	r3, r0
 8006464:	73fb      	strb	r3, [r7, #15]
      break;
 8006466:	e020      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fbc7 	bl	8006c04 <USBD_StdItfReq>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
      break;
 800647a:	e016      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fc29 	bl	8006cdc <USBD_StdEPReq>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
      break;
 800648e:	e00c      	b.n	80064aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006496:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800649a:	b2db      	uxtb	r3, r3
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fe00 	bl	80080a4 <USBD_LL_StallEP>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
      break;
 80064a8:	bf00      	nop
  }

  return ret;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	460b      	mov	r3, r1
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064c6:	7afb      	ldrb	r3, [r7, #11]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d16e      	bne.n	80065aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064da:	2b03      	cmp	r3, #3
 80064dc:	f040 8098 	bne.w	8006610 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d913      	bls.n	8006514 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	1ad2      	subs	r2, r2, r3
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4293      	cmp	r3, r2
 8006504:	bf28      	it	cs
 8006506:	4613      	movcs	r3, r2
 8006508:	461a      	mov	r2, r3
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 f984 	bl	800781a <USBD_CtlContinueRx>
 8006512:	e07d      	b.n	8006610 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2b02      	cmp	r3, #2
 8006520:	d014      	beq.n	800654c <USBD_LL_DataOutStage+0x98>
 8006522:	2b02      	cmp	r3, #2
 8006524:	d81d      	bhi.n	8006562 <USBD_LL_DataOutStage+0xae>
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <USBD_LL_DataOutStage+0x7c>
 800652a:	2b01      	cmp	r3, #1
 800652c:	d003      	beq.n	8006536 <USBD_LL_DataOutStage+0x82>
 800652e:	e018      	b.n	8006562 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	75bb      	strb	r3, [r7, #22]
            break;
 8006534:	e018      	b.n	8006568 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800653c:	b2db      	uxtb	r3, r3
 800653e:	4619      	mov	r1, r3
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fa5e 	bl	8006a02 <USBD_CoreFindIF>
 8006546:	4603      	mov	r3, r0
 8006548:	75bb      	strb	r3, [r7, #22]
            break;
 800654a:	e00d      	b.n	8006568 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4619      	mov	r1, r3
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fa60 	bl	8006a1c <USBD_CoreFindEP>
 800655c:	4603      	mov	r3, r0
 800655e:	75bb      	strb	r3, [r7, #22]
            break;
 8006560:	e002      	b.n	8006568 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	75bb      	strb	r3, [r7, #22]
            break;
 8006566:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006568:	7dbb      	ldrb	r3, [r7, #22]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d119      	bne.n	80065a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d113      	bne.n	80065a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800657a:	7dba      	ldrb	r2, [r7, #22]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	32ae      	adds	r2, #174	; 0xae
 8006580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800658a:	7dba      	ldrb	r2, [r7, #22]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006592:	7dba      	ldrb	r2, [r7, #22]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	32ae      	adds	r2, #174	; 0xae
 8006598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f001 f94a 	bl	800783c <USBD_CtlSendStatus>
 80065a8:	e032      	b.n	8006610 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065aa:	7afb      	ldrb	r3, [r7, #11]
 80065ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	4619      	mov	r1, r3
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fa31 	bl	8006a1c <USBD_CoreFindEP>
 80065ba:	4603      	mov	r3, r0
 80065bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065be:	7dbb      	ldrb	r3, [r7, #22]
 80065c0:	2bff      	cmp	r3, #255	; 0xff
 80065c2:	d025      	beq.n	8006610 <USBD_LL_DataOutStage+0x15c>
 80065c4:	7dbb      	ldrb	r3, [r7, #22]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d122      	bne.n	8006610 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d117      	bne.n	8006606 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065d6:	7dba      	ldrb	r2, [r7, #22]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	32ae      	adds	r2, #174	; 0xae
 80065dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00f      	beq.n	8006606 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065e6:	7dba      	ldrb	r2, [r7, #22]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065ee:	7dba      	ldrb	r2, [r7, #22]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	32ae      	adds	r2, #174	; 0xae
 80065f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	7afa      	ldrb	r2, [r7, #11]
 80065fc:	4611      	mov	r1, r2
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	4798      	blx	r3
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	e000      	b.n	8006612 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b086      	sub	sp, #24
 800661e:	af00      	add	r7, sp, #0
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	460b      	mov	r3, r1
 8006624:	607a      	str	r2, [r7, #4]
 8006626:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d16f      	bne.n	800670e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3314      	adds	r3, #20
 8006632:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800663a:	2b02      	cmp	r3, #2
 800663c:	d15a      	bne.n	80066f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	429a      	cmp	r2, r3
 8006648:	d914      	bls.n	8006674 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	461a      	mov	r2, r3
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f001 f8ac 	bl	80077be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006666:	2300      	movs	r3, #0
 8006668:	2200      	movs	r2, #0
 800666a:	2100      	movs	r1, #0
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f001 fdc3 	bl	80081f8 <USBD_LL_PrepareReceive>
 8006672:	e03f      	b.n	80066f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	429a      	cmp	r2, r3
 800667e:	d11c      	bne.n	80066ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006688:	429a      	cmp	r2, r3
 800668a:	d316      	bcc.n	80066ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006696:	429a      	cmp	r2, r3
 8006698:	d20f      	bcs.n	80066ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800669a:	2200      	movs	r2, #0
 800669c:	2100      	movs	r1, #0
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f001 f88d 	bl	80077be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066ac:	2300      	movs	r3, #0
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f001 fda0 	bl	80081f8 <USBD_LL_PrepareReceive>
 80066b8:	e01c      	b.n	80066f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d10f      	bne.n	80066e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066e6:	2180      	movs	r1, #128	; 0x80
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f001 fcdb 	bl	80080a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f001 f8b7 	bl	8007862 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d03a      	beq.n	8006774 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f7ff fe42 	bl	8006388 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800670c:	e032      	b.n	8006774 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800670e:	7afb      	ldrb	r3, [r7, #11]
 8006710:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006714:	b2db      	uxtb	r3, r3
 8006716:	4619      	mov	r1, r3
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 f97f 	bl	8006a1c <USBD_CoreFindEP>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	2bff      	cmp	r3, #255	; 0xff
 8006726:	d025      	beq.n	8006774 <USBD_LL_DataInStage+0x15a>
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d122      	bne.n	8006774 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b03      	cmp	r3, #3
 8006738:	d11c      	bne.n	8006774 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800673a:	7dfa      	ldrb	r2, [r7, #23]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	32ae      	adds	r2, #174	; 0xae
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d014      	beq.n	8006774 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800674a:	7dfa      	ldrb	r2, [r7, #23]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006752:	7dfa      	ldrb	r2, [r7, #23]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	32ae      	adds	r2, #174	; 0xae
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	7afa      	ldrb	r2, [r7, #11]
 8006760:	4611      	mov	r1, r2
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	4798      	blx	r3
 8006766:	4603      	mov	r3, r0
 8006768:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800676a:	7dbb      	ldrb	r3, [r7, #22]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006770:	7dbb      	ldrb	r3, [r7, #22]
 8006772:	e000      	b.n	8006776 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b084      	sub	sp, #16
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006786:	2300      	movs	r3, #0
 8006788:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d014      	beq.n	80067e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00e      	beq.n	80067e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6852      	ldr	r2, [r2, #4]
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	4611      	mov	r1, r2
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067e4:	2340      	movs	r3, #64	; 0x40
 80067e6:	2200      	movs	r2, #0
 80067e8:	2100      	movs	r1, #0
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 fc15 	bl	800801a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2240      	movs	r2, #64	; 0x40
 80067fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006800:	2340      	movs	r3, #64	; 0x40
 8006802:	2200      	movs	r2, #0
 8006804:	2180      	movs	r1, #128	; 0x80
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fc07 	bl	800801a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2240      	movs	r2, #64	; 0x40
 8006816:	621a      	str	r2, [r3, #32]

  return ret;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006850:	b2da      	uxtb	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2204      	movs	r2, #4
 800685c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b04      	cmp	r3, #4
 8006880:	d106      	bne.n	8006890 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006888:	b2da      	uxtb	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d110      	bne.n	80068d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00b      	beq.n	80068d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d005      	beq.n	80068d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3708      	adds	r7, #8
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	32ae      	adds	r2, #174	; 0xae
 80068f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e01c      	b.n	800693a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b03      	cmp	r3, #3
 800690a:	d115      	bne.n	8006938 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	32ae      	adds	r2, #174	; 0xae
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	32ae      	adds	r2, #174	; 0xae
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	78fa      	ldrb	r2, [r7, #3]
 8006932:	4611      	mov	r1, r2
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	460b      	mov	r3, r1
 800694c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	32ae      	adds	r2, #174	; 0xae
 8006958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006960:	2303      	movs	r3, #3
 8006962:	e01c      	b.n	800699e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b03      	cmp	r3, #3
 800696e:	d115      	bne.n	800699c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	32ae      	adds	r2, #174	; 0xae
 800697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	32ae      	adds	r2, #174	; 0xae
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	4611      	mov	r1, r2
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00e      	beq.n	80069f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6852      	ldr	r2, [r2, #4]
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	4611      	mov	r1, r2
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4798      	blx	r3
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr

08006a36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	460b      	mov	r3, r1
 8006a40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	885b      	ldrh	r3, [r3, #2]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d920      	bls.n	8006aa0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a66:	e013      	b.n	8006a90 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a68:	f107 030a 	add.w	r3, r7, #10
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6978      	ldr	r0, [r7, #20]
 8006a70:	f000 f81b 	bl	8006aaa <USBD_GetNextDesc>
 8006a74:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	2b05      	cmp	r3, #5
 8006a7c:	d108      	bne.n	8006a90 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	789b      	ldrb	r3, [r3, #2]
 8006a86:	78fa      	ldrb	r2, [r7, #3]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d008      	beq.n	8006a9e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	885b      	ldrh	r3, [r3, #2]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	897b      	ldrh	r3, [r7, #10]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d8e5      	bhi.n	8006a68 <USBD_GetEpDesc+0x32>
 8006a9c:	e000      	b.n	8006aa0 <USBD_GetEpDesc+0x6a>
          break;
 8006a9e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006aa0:	693b      	ldr	r3, [r7, #16]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	881a      	ldrh	r2, [r3, #0]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	4413      	add	r3, r2
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	3301      	adds	r3, #1
 8006afa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b02:	8a3b      	ldrh	r3, [r7, #16]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	b21a      	sxth	r2, r3
 8006b08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	b21b      	sxth	r3, r3
 8006b10:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b12:	89fb      	ldrh	r3, [r7, #14]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	d005      	beq.n	8006b46 <USBD_StdDevReq+0x26>
 8006b3a:	2b40      	cmp	r3, #64	; 0x40
 8006b3c:	d857      	bhi.n	8006bee <USBD_StdDevReq+0xce>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00f      	beq.n	8006b62 <USBD_StdDevReq+0x42>
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d153      	bne.n	8006bee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	32ae      	adds	r2, #174	; 0xae
 8006b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b60:	e04a      	b.n	8006bf8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	785b      	ldrb	r3, [r3, #1]
 8006b66:	2b09      	cmp	r3, #9
 8006b68:	d83b      	bhi.n	8006be2 <USBD_StdDevReq+0xc2>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <USBD_StdDevReq+0x50>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006bc5 	.word	0x08006bc5
 8006b74:	08006bd9 	.word	0x08006bd9
 8006b78:	08006be3 	.word	0x08006be3
 8006b7c:	08006bcf 	.word	0x08006bcf
 8006b80:	08006be3 	.word	0x08006be3
 8006b84:	08006ba3 	.word	0x08006ba3
 8006b88:	08006b99 	.word	0x08006b99
 8006b8c:	08006be3 	.word	0x08006be3
 8006b90:	08006bbb 	.word	0x08006bbb
 8006b94:	08006bad 	.word	0x08006bad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fa3c 	bl	8007018 <USBD_GetDescriptor>
          break;
 8006ba0:	e024      	b.n	8006bec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fba1 	bl	80072ec <USBD_SetAddress>
          break;
 8006baa:	e01f      	b.n	8006bec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fbe0 	bl	8007374 <USBD_SetConfig>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]
          break;
 8006bb8:	e018      	b.n	8006bec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fc83 	bl	80074c8 <USBD_GetConfig>
          break;
 8006bc2:	e013      	b.n	8006bec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fcb4 	bl	8007534 <USBD_GetStatus>
          break;
 8006bcc:	e00e      	b.n	8006bec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 fce3 	bl	800759c <USBD_SetFeature>
          break;
 8006bd6:	e009      	b.n	8006bec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fd07 	bl	80075ee <USBD_ClrFeature>
          break;
 8006be0:	e004      	b.n	8006bec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fd5e 	bl	80076a6 <USBD_CtlError>
          break;
 8006bea:	bf00      	nop
      }
      break;
 8006bec:	e004      	b.n	8006bf8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fd58 	bl	80076a6 <USBD_CtlError>
      break;
 8006bf6:	bf00      	nop
  }

  return ret;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop

08006c04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c1a:	2b40      	cmp	r3, #64	; 0x40
 8006c1c:	d005      	beq.n	8006c2a <USBD_StdItfReq+0x26>
 8006c1e:	2b40      	cmp	r3, #64	; 0x40
 8006c20:	d852      	bhi.n	8006cc8 <USBD_StdItfReq+0xc4>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <USBD_StdItfReq+0x26>
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d14e      	bne.n	8006cc8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d840      	bhi.n	8006cba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	889b      	ldrh	r3, [r3, #4]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d836      	bhi.n	8006cb0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	889b      	ldrh	r3, [r3, #4]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fed9 	bl	8006a02 <USBD_CoreFindIF>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	2bff      	cmp	r3, #255	; 0xff
 8006c58:	d01d      	beq.n	8006c96 <USBD_StdItfReq+0x92>
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d11a      	bne.n	8006c96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c60:	7bba      	ldrb	r2, [r7, #14]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	32ae      	adds	r2, #174	; 0xae
 8006c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00f      	beq.n	8006c90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c70:	7bba      	ldrb	r2, [r7, #14]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c78:	7bba      	ldrb	r2, [r7, #14]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	32ae      	adds	r2, #174	; 0xae
 8006c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c8e:	e004      	b.n	8006c9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c90:	2303      	movs	r3, #3
 8006c92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c94:	e001      	b.n	8006c9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c96:	2303      	movs	r3, #3
 8006c98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	88db      	ldrh	r3, [r3, #6]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d110      	bne.n	8006cc4 <USBD_StdItfReq+0xc0>
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10d      	bne.n	8006cc4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fdc7 	bl	800783c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cae:	e009      	b.n	8006cc4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fcf7 	bl	80076a6 <USBD_CtlError>
          break;
 8006cb8:	e004      	b.n	8006cc4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fcf2 	bl	80076a6 <USBD_CtlError>
          break;
 8006cc2:	e000      	b.n	8006cc6 <USBD_StdItfReq+0xc2>
          break;
 8006cc4:	bf00      	nop
      }
      break;
 8006cc6:	e004      	b.n	8006cd2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fceb 	bl	80076a6 <USBD_CtlError>
      break;
 8006cd0:	bf00      	nop
  }

  return ret;
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	889b      	ldrh	r3, [r3, #4]
 8006cee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cf8:	2b40      	cmp	r3, #64	; 0x40
 8006cfa:	d007      	beq.n	8006d0c <USBD_StdEPReq+0x30>
 8006cfc:	2b40      	cmp	r3, #64	; 0x40
 8006cfe:	f200 817f 	bhi.w	8007000 <USBD_StdEPReq+0x324>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d02a      	beq.n	8006d5c <USBD_StdEPReq+0x80>
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	f040 817a 	bne.w	8007000 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d0c:	7bbb      	ldrb	r3, [r7, #14]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7ff fe83 	bl	8006a1c <USBD_CoreFindEP>
 8006d16:	4603      	mov	r3, r0
 8006d18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d1a:	7b7b      	ldrb	r3, [r7, #13]
 8006d1c:	2bff      	cmp	r3, #255	; 0xff
 8006d1e:	f000 8174 	beq.w	800700a <USBD_StdEPReq+0x32e>
 8006d22:	7b7b      	ldrb	r3, [r7, #13]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f040 8170 	bne.w	800700a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d2a:	7b7a      	ldrb	r2, [r7, #13]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d32:	7b7a      	ldrb	r2, [r7, #13]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	32ae      	adds	r2, #174	; 0xae
 8006d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 8163 	beq.w	800700a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d44:	7b7a      	ldrb	r2, [r7, #13]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	32ae      	adds	r2, #174	; 0xae
 8006d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d5a:	e156      	b.n	800700a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	785b      	ldrb	r3, [r3, #1]
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d008      	beq.n	8006d76 <USBD_StdEPReq+0x9a>
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	f300 8145 	bgt.w	8006ff4 <USBD_StdEPReq+0x318>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 809b 	beq.w	8006ea6 <USBD_StdEPReq+0x1ca>
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d03c      	beq.n	8006dee <USBD_StdEPReq+0x112>
 8006d74:	e13e      	b.n	8006ff4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d002      	beq.n	8006d88 <USBD_StdEPReq+0xac>
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d016      	beq.n	8006db4 <USBD_StdEPReq+0xd8>
 8006d86:	e02c      	b.n	8006de2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00d      	beq.n	8006daa <USBD_StdEPReq+0xce>
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	2b80      	cmp	r3, #128	; 0x80
 8006d92:	d00a      	beq.n	8006daa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d94:	7bbb      	ldrb	r3, [r7, #14]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 f983 	bl	80080a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d9e:	2180      	movs	r1, #128	; 0x80
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f001 f97f 	bl	80080a4 <USBD_LL_StallEP>
 8006da6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006da8:	e020      	b.n	8006dec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fc7a 	bl	80076a6 <USBD_CtlError>
              break;
 8006db2:	e01b      	b.n	8006dec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	885b      	ldrh	r3, [r3, #2]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10e      	bne.n	8006dda <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00b      	beq.n	8006dda <USBD_StdEPReq+0xfe>
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b80      	cmp	r3, #128	; 0x80
 8006dc6:	d008      	beq.n	8006dda <USBD_StdEPReq+0xfe>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	88db      	ldrh	r3, [r3, #6]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d104      	bne.n	8006dda <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f965 	bl	80080a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fd2e 	bl	800783c <USBD_CtlSendStatus>

              break;
 8006de0:	e004      	b.n	8006dec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fc5e 	bl	80076a6 <USBD_CtlError>
              break;
 8006dea:	bf00      	nop
          }
          break;
 8006dec:	e107      	b.n	8006ffe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d002      	beq.n	8006e00 <USBD_StdEPReq+0x124>
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d016      	beq.n	8006e2c <USBD_StdEPReq+0x150>
 8006dfe:	e04b      	b.n	8006e98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00d      	beq.n	8006e22 <USBD_StdEPReq+0x146>
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b80      	cmp	r3, #128	; 0x80
 8006e0a:	d00a      	beq.n	8006e22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f947 	bl	80080a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e16:	2180      	movs	r1, #128	; 0x80
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f943 	bl	80080a4 <USBD_LL_StallEP>
 8006e1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e20:	e040      	b.n	8006ea4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fc3e 	bl	80076a6 <USBD_CtlError>
              break;
 8006e2a:	e03b      	b.n	8006ea4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	885b      	ldrh	r3, [r3, #2]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d136      	bne.n	8006ea2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d004      	beq.n	8006e48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 f94d 	bl	80080e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fcf7 	bl	800783c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fde2 	bl	8006a1c <USBD_CoreFindEP>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e5c:	7b7b      	ldrb	r3, [r7, #13]
 8006e5e:	2bff      	cmp	r3, #255	; 0xff
 8006e60:	d01f      	beq.n	8006ea2 <USBD_StdEPReq+0x1c6>
 8006e62:	7b7b      	ldrb	r3, [r7, #13]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d11c      	bne.n	8006ea2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e68:	7b7a      	ldrb	r2, [r7, #13]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e70:	7b7a      	ldrb	r2, [r7, #13]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	32ae      	adds	r2, #174	; 0xae
 8006e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d010      	beq.n	8006ea2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e80:	7b7a      	ldrb	r2, [r7, #13]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	32ae      	adds	r2, #174	; 0xae
 8006e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
 8006e92:	4603      	mov	r3, r0
 8006e94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e96:	e004      	b.n	8006ea2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fc03 	bl	80076a6 <USBD_CtlError>
              break;
 8006ea0:	e000      	b.n	8006ea4 <USBD_StdEPReq+0x1c8>
              break;
 8006ea2:	bf00      	nop
          }
          break;
 8006ea4:	e0ab      	b.n	8006ffe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d002      	beq.n	8006eb8 <USBD_StdEPReq+0x1dc>
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d032      	beq.n	8006f1c <USBD_StdEPReq+0x240>
 8006eb6:	e097      	b.n	8006fe8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d007      	beq.n	8006ece <USBD_StdEPReq+0x1f2>
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	2b80      	cmp	r3, #128	; 0x80
 8006ec2:	d004      	beq.n	8006ece <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fbed 	bl	80076a6 <USBD_CtlError>
                break;
 8006ecc:	e091      	b.n	8006ff2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ece:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da0b      	bge.n	8006eee <USBD_StdEPReq+0x212>
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	3310      	adds	r3, #16
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	3304      	adds	r3, #4
 8006eec:	e00b      	b.n	8006f06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	3304      	adds	r3, #4
 8006f06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2202      	movs	r2, #2
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fc37 	bl	8007788 <USBD_CtlSendData>
              break;
 8006f1a:	e06a      	b.n	8006ff2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	da11      	bge.n	8006f48 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	f003 020f 	and.w	r2, r3, #15
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	3324      	adds	r3, #36	; 0x24
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d117      	bne.n	8006f6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fbb0 	bl	80076a6 <USBD_CtlError>
                  break;
 8006f46:	e054      	b.n	8006ff2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	f003 020f 	and.w	r2, r3, #15
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	4613      	mov	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d104      	bne.n	8006f6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fb9d 	bl	80076a6 <USBD_CtlError>
                  break;
 8006f6c:	e041      	b.n	8006ff2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	da0b      	bge.n	8006f8e <USBD_StdEPReq+0x2b2>
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	3310      	adds	r3, #16
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4413      	add	r3, r2
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	e00b      	b.n	8006fa6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fa8:	7bbb      	ldrb	r3, [r7, #14]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <USBD_StdEPReq+0x2d8>
 8006fae:	7bbb      	ldrb	r3, [r7, #14]
 8006fb0:	2b80      	cmp	r3, #128	; 0x80
 8006fb2:	d103      	bne.n	8006fbc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	e00e      	b.n	8006fda <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 f8ad 	bl	8008120 <USBD_LL_IsStallEP>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e002      	b.n	8006fda <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fbd1 	bl	8007788 <USBD_CtlSendData>
              break;
 8006fe6:	e004      	b.n	8006ff2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fb5b 	bl	80076a6 <USBD_CtlError>
              break;
 8006ff0:	bf00      	nop
          }
          break;
 8006ff2:	e004      	b.n	8006ffe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fb55 	bl	80076a6 <USBD_CtlError>
          break;
 8006ffc:	bf00      	nop
      }
      break;
 8006ffe:	e005      	b.n	800700c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb4f 	bl	80076a6 <USBD_CtlError>
      break;
 8007008:	e000      	b.n	800700c <USBD_StdEPReq+0x330>
      break;
 800700a:	bf00      	nop
  }

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	0a1b      	lsrs	r3, r3, #8
 8007034:	b29b      	uxth	r3, r3
 8007036:	3b01      	subs	r3, #1
 8007038:	2b06      	cmp	r3, #6
 800703a:	f200 8128 	bhi.w	800728e <USBD_GetDescriptor+0x276>
 800703e:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBD_GetDescriptor+0x2c>)
 8007040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007044:	08007061 	.word	0x08007061
 8007048:	08007079 	.word	0x08007079
 800704c:	080070b9 	.word	0x080070b9
 8007050:	0800728f 	.word	0x0800728f
 8007054:	0800728f 	.word	0x0800728f
 8007058:	0800722f 	.word	0x0800722f
 800705c:	0800725b 	.word	0x0800725b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7c12      	ldrb	r2, [r2, #16]
 800706c:	f107 0108 	add.w	r1, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
      break;
 8007076:	e112      	b.n	800729e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7c1b      	ldrb	r3, [r3, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10d      	bne.n	800709c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f107 0208 	add.w	r2, r7, #8
 800708c:	4610      	mov	r0, r2
 800708e:	4798      	blx	r3
 8007090:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	2202      	movs	r2, #2
 8007098:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800709a:	e100      	b.n	800729e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	f107 0208 	add.w	r2, r7, #8
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
 80070ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3301      	adds	r3, #1
 80070b2:	2202      	movs	r2, #2
 80070b4:	701a      	strb	r2, [r3, #0]
      break;
 80070b6:	e0f2      	b.n	800729e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	885b      	ldrh	r3, [r3, #2]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b05      	cmp	r3, #5
 80070c0:	f200 80ac 	bhi.w	800721c <USBD_GetDescriptor+0x204>
 80070c4:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <USBD_GetDescriptor+0xb4>)
 80070c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ca:	bf00      	nop
 80070cc:	080070e5 	.word	0x080070e5
 80070d0:	08007119 	.word	0x08007119
 80070d4:	0800714d 	.word	0x0800714d
 80070d8:	08007181 	.word	0x08007181
 80070dc:	080071b5 	.word	0x080071b5
 80070e0:	080071e9 	.word	0x080071e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	7c12      	ldrb	r2, [r2, #16]
 80070fc:	f107 0108 	add.w	r1, r7, #8
 8007100:	4610      	mov	r0, r2
 8007102:	4798      	blx	r3
 8007104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007106:	e091      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 facb 	bl	80076a6 <USBD_CtlError>
            err++;
 8007110:	7afb      	ldrb	r3, [r7, #11]
 8007112:	3301      	adds	r3, #1
 8007114:	72fb      	strb	r3, [r7, #11]
          break;
 8007116:	e089      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7c12      	ldrb	r2, [r2, #16]
 8007130:	f107 0108 	add.w	r1, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713a:	e077      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fab1 	bl	80076a6 <USBD_CtlError>
            err++;
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	3301      	adds	r3, #1
 8007148:	72fb      	strb	r3, [r7, #11]
          break;
 800714a:	e06f      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	7c12      	ldrb	r2, [r2, #16]
 8007164:	f107 0108 	add.w	r1, r7, #8
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
 800716c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716e:	e05d      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa97 	bl	80076a6 <USBD_CtlError>
            err++;
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	3301      	adds	r3, #1
 800717c:	72fb      	strb	r3, [r7, #11]
          break;
 800717e:	e055      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00b      	beq.n	80071a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	7c12      	ldrb	r2, [r2, #16]
 8007198:	f107 0108 	add.w	r1, r7, #8
 800719c:	4610      	mov	r0, r2
 800719e:	4798      	blx	r3
 80071a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a2:	e043      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fa7d 	bl	80076a6 <USBD_CtlError>
            err++;
 80071ac:	7afb      	ldrb	r3, [r7, #11]
 80071ae:	3301      	adds	r3, #1
 80071b0:	72fb      	strb	r3, [r7, #11]
          break;
 80071b2:	e03b      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	7c12      	ldrb	r2, [r2, #16]
 80071cc:	f107 0108 	add.w	r1, r7, #8
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
 80071d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d6:	e029      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa63 	bl	80076a6 <USBD_CtlError>
            err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
          break;
 80071e6:	e021      	b.n	800722c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720a:	e00f      	b.n	800722c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa49 	bl	80076a6 <USBD_CtlError>
            err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
          break;
 800721a:	e007      	b.n	800722c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa41 	bl	80076a6 <USBD_CtlError>
          err++;
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	3301      	adds	r3, #1
 8007228:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800722a:	bf00      	nop
      }
      break;
 800722c:	e037      	b.n	800729e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7c1b      	ldrb	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d109      	bne.n	800724a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723e:	f107 0208 	add.w	r2, r7, #8
 8007242:	4610      	mov	r0, r2
 8007244:	4798      	blx	r3
 8007246:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007248:	e029      	b.n	800729e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fa2a 	bl	80076a6 <USBD_CtlError>
        err++;
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	3301      	adds	r3, #1
 8007256:	72fb      	strb	r3, [r7, #11]
      break;
 8007258:	e021      	b.n	800729e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	7c1b      	ldrb	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10d      	bne.n	800727e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	4610      	mov	r0, r2
 8007270:	4798      	blx	r3
 8007272:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	2207      	movs	r2, #7
 800727a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800727c:	e00f      	b.n	800729e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa10 	bl	80076a6 <USBD_CtlError>
        err++;
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	3301      	adds	r3, #1
 800728a:	72fb      	strb	r3, [r7, #11]
      break;
 800728c:	e007      	b.n	800729e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa08 	bl	80076a6 <USBD_CtlError>
      err++;
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	3301      	adds	r3, #1
 800729a:	72fb      	strb	r3, [r7, #11]
      break;
 800729c:	bf00      	nop
  }

  if (err != 0U)
 800729e:	7afb      	ldrb	r3, [r7, #11]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11e      	bne.n	80072e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	88db      	ldrh	r3, [r3, #6]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d016      	beq.n	80072da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072ac:	893b      	ldrh	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00e      	beq.n	80072d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	88da      	ldrh	r2, [r3, #6]
 80072b6:	893b      	ldrh	r3, [r7, #8]
 80072b8:	4293      	cmp	r3, r2
 80072ba:	bf28      	it	cs
 80072bc:	4613      	movcs	r3, r2
 80072be:	b29b      	uxth	r3, r3
 80072c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072c2:	893b      	ldrh	r3, [r7, #8]
 80072c4:	461a      	mov	r2, r3
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa5d 	bl	8007788 <USBD_CtlSendData>
 80072ce:	e009      	b.n	80072e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f9e7 	bl	80076a6 <USBD_CtlError>
 80072d8:	e004      	b.n	80072e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 faae 	bl	800783c <USBD_CtlSendStatus>
 80072e0:	e000      	b.n	80072e4 <USBD_GetDescriptor+0x2cc>
    return;
 80072e2:	bf00      	nop
  }
}
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop

080072ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	889b      	ldrh	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d131      	bne.n	8007362 <USBD_SetAddress+0x76>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	88db      	ldrh	r3, [r3, #6]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d12d      	bne.n	8007362 <USBD_SetAddress+0x76>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	2b7f      	cmp	r3, #127	; 0x7f
 800730c:	d829      	bhi.n	8007362 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007318:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b03      	cmp	r3, #3
 8007324:	d104      	bne.n	8007330 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f9bc 	bl	80076a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732e:	e01d      	b.n	800736c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	7bfa      	ldrb	r2, [r7, #15]
 8007334:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 ff1b 	bl	8008178 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fa7a 	bl	800783c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007348:	7bfb      	ldrb	r3, [r7, #15]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2202      	movs	r2, #2
 8007352:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007356:	e009      	b.n	800736c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007360:	e004      	b.n	800736c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f99e 	bl	80076a6 <USBD_CtlError>
  }
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	4b4e      	ldr	r3, [pc, #312]	; (80074c4 <USBD_SetConfig+0x150>)
 800738a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800738c:	4b4d      	ldr	r3, [pc, #308]	; (80074c4 <USBD_SetConfig+0x150>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d905      	bls.n	80073a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f985 	bl	80076a6 <USBD_CtlError>
    return USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	e08c      	b.n	80074ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d002      	beq.n	80073b2 <USBD_SetConfig+0x3e>
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d029      	beq.n	8007404 <USBD_SetConfig+0x90>
 80073b0:	e075      	b.n	800749e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073b2:	4b44      	ldr	r3, [pc, #272]	; (80074c4 <USBD_SetConfig+0x150>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d020      	beq.n	80073fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073ba:	4b42      	ldr	r3, [pc, #264]	; (80074c4 <USBD_SetConfig+0x150>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073c4:	4b3f      	ldr	r3, [pc, #252]	; (80074c4 <USBD_SetConfig+0x150>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fe ffe7 	bl	800639e <USBD_SetClassConfig>
 80073d0:	4603      	mov	r3, r0
 80073d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f962 	bl	80076a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073ea:	e065      	b.n	80074b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fa25 	bl	800783c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2203      	movs	r2, #3
 80073f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073fa:	e05d      	b.n	80074b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fa1d 	bl	800783c <USBD_CtlSendStatus>
      break;
 8007402:	e059      	b.n	80074b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007404:	4b2f      	ldr	r3, [pc, #188]	; (80074c4 <USBD_SetConfig+0x150>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d112      	bne.n	8007432 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007414:	4b2b      	ldr	r3, [pc, #172]	; (80074c4 <USBD_SetConfig+0x150>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800741e:	4b29      	ldr	r3, [pc, #164]	; (80074c4 <USBD_SetConfig+0x150>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7fe ffd6 	bl	80063d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 fa06 	bl	800783c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007430:	e042      	b.n	80074b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <USBD_SetConfig+0x150>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d02a      	beq.n	8007496 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7fe ffc4 	bl	80063d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800744e:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <USBD_SetConfig+0x150>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007458:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <USBD_SetConfig+0x150>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fe ff9d 	bl	800639e <USBD_SetClassConfig>
 8007464:	4603      	mov	r3, r0
 8007466:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00f      	beq.n	800748e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f918 	bl	80076a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fe ffa9 	bl	80063d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800748c:	e014      	b.n	80074b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f9d4 	bl	800783c <USBD_CtlSendStatus>
      break;
 8007494:	e010      	b.n	80074b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f9d0 	bl	800783c <USBD_CtlSendStatus>
      break;
 800749c:	e00c      	b.n	80074b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f900 	bl	80076a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074a6:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <USBD_SetConfig+0x150>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7fe ff92 	bl	80063d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074b2:	2303      	movs	r3, #3
 80074b4:	73fb      	strb	r3, [r7, #15]
      break;
 80074b6:	bf00      	nop
  }

  return ret;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	200002dc 	.word	0x200002dc

080074c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	88db      	ldrh	r3, [r3, #6]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d004      	beq.n	80074e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8e2 	bl	80076a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074e2:	e023      	b.n	800752c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	dc02      	bgt.n	80074f6 <USBD_GetConfig+0x2e>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	dc03      	bgt.n	80074fc <USBD_GetConfig+0x34>
 80074f4:	e015      	b.n	8007522 <USBD_GetConfig+0x5a>
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d00b      	beq.n	8007512 <USBD_GetConfig+0x4a>
 80074fa:	e012      	b.n	8007522 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	3308      	adds	r3, #8
 8007506:	2201      	movs	r2, #1
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f93c 	bl	8007788 <USBD_CtlSendData>
        break;
 8007510:	e00c      	b.n	800752c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3304      	adds	r3, #4
 8007516:	2201      	movs	r2, #1
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f934 	bl	8007788 <USBD_CtlSendData>
        break;
 8007520:	e004      	b.n	800752c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f8be 	bl	80076a6 <USBD_CtlError>
        break;
 800752a:	bf00      	nop
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	b2db      	uxtb	r3, r3
 8007546:	3b01      	subs	r3, #1
 8007548:	2b02      	cmp	r3, #2
 800754a:	d81e      	bhi.n	800758a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	88db      	ldrh	r3, [r3, #6]
 8007550:	2b02      	cmp	r3, #2
 8007552:	d004      	beq.n	800755e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f8a5 	bl	80076a6 <USBD_CtlError>
        break;
 800755c:	e01a      	b.n	8007594 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	f043 0202 	orr.w	r2, r3, #2
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	330c      	adds	r3, #12
 800757e:	2202      	movs	r2, #2
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f900 	bl	8007788 <USBD_CtlSendData>
      break;
 8007588:	e004      	b.n	8007594 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f88a 	bl	80076a6 <USBD_CtlError>
      break;
 8007592:	bf00      	nop
  }
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	885b      	ldrh	r3, [r3, #2]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d107      	bne.n	80075be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f940 	bl	800783c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075bc:	e013      	b.n	80075e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	885b      	ldrh	r3, [r3, #2]
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d10b      	bne.n	80075de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	889b      	ldrh	r3, [r3, #4]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 f930 	bl	800783c <USBD_CtlSendStatus>
}
 80075dc:	e003      	b.n	80075e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f860 	bl	80076a6 <USBD_CtlError>
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	2b02      	cmp	r3, #2
 8007604:	d80b      	bhi.n	800761e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	885b      	ldrh	r3, [r3, #2]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d10c      	bne.n	8007628 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f910 	bl	800783c <USBD_CtlSendStatus>
      }
      break;
 800761c:	e004      	b.n	8007628 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f840 	bl	80076a6 <USBD_CtlError>
      break;
 8007626:	e000      	b.n	800762a <USBD_ClrFeature+0x3c>
      break;
 8007628:	bf00      	nop
  }
}
 800762a:	bf00      	nop
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	781a      	ldrb	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3301      	adds	r3, #1
 800765a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7ff fa41 	bl	8006ae4 <SWAPBYTE>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f7ff fa34 	bl	8006ae4 <SWAPBYTE>
 800767c:	4603      	mov	r3, r0
 800767e:	461a      	mov	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	3301      	adds	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	3301      	adds	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff fa27 	bl	8006ae4 <SWAPBYTE>
 8007696:	4603      	mov	r3, r0
 8007698:	461a      	mov	r2, r3
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	80da      	strh	r2, [r3, #6]
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fcf6 	bl	80080a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076b8:	2100      	movs	r1, #0
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fcf2 	bl	80080a4 <USBD_LL_StallEP>
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d036      	beq.n	800774c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076e2:	6938      	ldr	r0, [r7, #16]
 80076e4:	f000 f836 	bl	8007754 <USBD_GetLen>
 80076e8:	4603      	mov	r3, r0
 80076ea:	3301      	adds	r3, #1
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	4413      	add	r3, r2
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	701a      	strb	r2, [r3, #0]
  idx++;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	3301      	adds	r3, #1
 8007706:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	4413      	add	r3, r2
 800770e:	2203      	movs	r2, #3
 8007710:	701a      	strb	r2, [r3, #0]
  idx++;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	3301      	adds	r3, #1
 8007716:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007718:	e013      	b.n	8007742 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	4413      	add	r3, r2
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	7812      	ldrb	r2, [r2, #0]
 8007724:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	3301      	adds	r3, #1
 800772a:	613b      	str	r3, [r7, #16]
    idx++;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	3301      	adds	r3, #1
 8007730:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	4413      	add	r3, r2
 8007738:	2200      	movs	r2, #0
 800773a:	701a      	strb	r2, [r3, #0]
    idx++;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	3301      	adds	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e7      	bne.n	800771a <USBD_GetString+0x52>
 800774a:	e000      	b.n	800774e <USBD_GetString+0x86>
    return;
 800774c:	bf00      	nop
  }
}
 800774e:	3718      	adds	r7, #24
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007764:	e005      	b.n	8007772 <USBD_GetLen+0x1e>
  {
    len++;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	3301      	adds	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3301      	adds	r3, #1
 8007770:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f5      	bne.n	8007766 <USBD_GetLen+0x12>
  }

  return len;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2202      	movs	r2, #2
 8007798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	2100      	movs	r1, #0
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fd01 	bl	80081b6 <USBD_LL_Transmit>

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	60b9      	str	r1, [r7, #8]
 80077c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	2100      	movs	r1, #0
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fcf0 	bl	80081b6 <USBD_LL_Transmit>

  return USBD_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2203      	movs	r2, #3
 80077f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	2100      	movs	r1, #0
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fcf4 	bl	80081f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	2100      	movs	r1, #0
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 fce3 	bl	80081f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2204      	movs	r2, #4
 8007848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800784c:	2300      	movs	r3, #0
 800784e:	2200      	movs	r2, #0
 8007850:	2100      	movs	r1, #0
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fcaf 	bl	80081b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2205      	movs	r2, #5
 800786e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007872:	2300      	movs	r3, #0
 8007874:	2200      	movs	r2, #0
 8007876:	2100      	movs	r1, #0
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fcbd 	bl	80081f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800788c:	2200      	movs	r2, #0
 800788e:	4912      	ldr	r1, [pc, #72]	; (80078d8 <MX_USB_DEVICE_Init+0x50>)
 8007890:	4812      	ldr	r0, [pc, #72]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 8007892:	f7fe fd07 	bl	80062a4 <USBD_Init>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800789c:	f7f9 fc94 	bl	80011c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078a0:	490f      	ldr	r1, [pc, #60]	; (80078e0 <MX_USB_DEVICE_Init+0x58>)
 80078a2:	480e      	ldr	r0, [pc, #56]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078a4:	f7fe fd2e 	bl	8006304 <USBD_RegisterClass>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078ae:	f7f9 fc8b 	bl	80011c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078b2:	490c      	ldr	r1, [pc, #48]	; (80078e4 <MX_USB_DEVICE_Init+0x5c>)
 80078b4:	4809      	ldr	r0, [pc, #36]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078b6:	f7fe fc1f 	bl	80060f8 <USBD_CDC_RegisterInterface>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078c0:	f7f9 fc82 	bl	80011c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078c4:	4805      	ldr	r0, [pc, #20]	; (80078dc <MX_USB_DEVICE_Init+0x54>)
 80078c6:	f7fe fd53 	bl	8006370 <USBD_Start>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078d0:	f7f9 fc7a 	bl	80011c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078d4:	bf00      	nop
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200000b0 	.word	0x200000b0
 80078dc:	200002e0 	.word	0x200002e0
 80078e0:	2000001c 	.word	0x2000001c
 80078e4:	2000009c 	.word	0x2000009c

080078e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078ec:	2200      	movs	r2, #0
 80078ee:	4905      	ldr	r1, [pc, #20]	; (8007904 <CDC_Init_FS+0x1c>)
 80078f0:	4805      	ldr	r0, [pc, #20]	; (8007908 <CDC_Init_FS+0x20>)
 80078f2:	f7fe fc1b 	bl	800612c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078f6:	4905      	ldr	r1, [pc, #20]	; (800790c <CDC_Init_FS+0x24>)
 80078f8:	4803      	ldr	r0, [pc, #12]	; (8007908 <CDC_Init_FS+0x20>)
 80078fa:	f7fe fc39 	bl	8006170 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007900:	4618      	mov	r0, r3
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000dbc 	.word	0x20000dbc
 8007908:	200002e0 	.word	0x200002e0
 800790c:	200005bc 	.word	0x200005bc

08007910 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007910:	b480      	push	{r7}
 8007912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007914:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007916:	4618      	mov	r0, r3
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
 800792c:	4613      	mov	r3, r2
 800792e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	2b23      	cmp	r3, #35	; 0x23
 8007934:	d84a      	bhi.n	80079cc <CDC_Control_FS+0xac>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <CDC_Control_FS+0x1c>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	080079cd 	.word	0x080079cd
 8007940:	080079cd 	.word	0x080079cd
 8007944:	080079cd 	.word	0x080079cd
 8007948:	080079cd 	.word	0x080079cd
 800794c:	080079cd 	.word	0x080079cd
 8007950:	080079cd 	.word	0x080079cd
 8007954:	080079cd 	.word	0x080079cd
 8007958:	080079cd 	.word	0x080079cd
 800795c:	080079cd 	.word	0x080079cd
 8007960:	080079cd 	.word	0x080079cd
 8007964:	080079cd 	.word	0x080079cd
 8007968:	080079cd 	.word	0x080079cd
 800796c:	080079cd 	.word	0x080079cd
 8007970:	080079cd 	.word	0x080079cd
 8007974:	080079cd 	.word	0x080079cd
 8007978:	080079cd 	.word	0x080079cd
 800797c:	080079cd 	.word	0x080079cd
 8007980:	080079cd 	.word	0x080079cd
 8007984:	080079cd 	.word	0x080079cd
 8007988:	080079cd 	.word	0x080079cd
 800798c:	080079cd 	.word	0x080079cd
 8007990:	080079cd 	.word	0x080079cd
 8007994:	080079cd 	.word	0x080079cd
 8007998:	080079cd 	.word	0x080079cd
 800799c:	080079cd 	.word	0x080079cd
 80079a0:	080079cd 	.word	0x080079cd
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079cd 	.word	0x080079cd
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	080079cd 	.word	0x080079cd
 80079b4:	080079cd 	.word	0x080079cd
 80079b8:	080079cd 	.word	0x080079cd
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079cd 	.word	0x080079cd
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	080079cd 	.word	0x080079cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80079cc:	bf00      	nop
  }

  return (USBD_OK);
 80079ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079e6:	6879      	ldr	r1, [r7, #4]
 80079e8:	480f      	ldr	r0, [pc, #60]	; (8007a28 <CDC_Receive_FS+0x4c>)
 80079ea:	f7fe fbc1 	bl	8006170 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079ee:	480e      	ldr	r0, [pc, #56]	; (8007a28 <CDC_Receive_FS+0x4c>)
 80079f0:	f7fe fc22 	bl	8006238 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	73fb      	strb	r3, [r7, #15]
  memset (buffer,'\0',64);
 80079fa:	2240      	movs	r2, #64	; 0x40
 80079fc:	2100      	movs	r1, #0
 80079fe:	480b      	ldr	r0, [pc, #44]	; (8007a2c <CDC_Receive_FS+0x50>)
 8007a00:	f000 fcaa 	bl	8008358 <memset>
  memcpy (buffer, Buf, len);
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	4808      	ldr	r0, [pc, #32]	; (8007a2c <CDC_Receive_FS+0x50>)
 8007a0c:	f000 fc96 	bl	800833c <memcpy>
  memset (Buf,'\0',len);
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	461a      	mov	r2, r3
 8007a14:	2100      	movs	r1, #0
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fc9e 	bl	8008358 <memset>
  return (USBD_OK);
 8007a1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	200002e0 	.word	0x200002e0
 8007a2c:	20000188 	.word	0x20000188

08007a30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007a40:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <CDC_Transmit_FS+0x48>)
 8007a42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e00b      	b.n	8007a6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007a56:	887b      	ldrh	r3, [r7, #2]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4806      	ldr	r0, [pc, #24]	; (8007a78 <CDC_Transmit_FS+0x48>)
 8007a5e:	f7fe fb65 	bl	800612c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007a62:	4805      	ldr	r0, [pc, #20]	; (8007a78 <CDC_Transmit_FS+0x48>)
 8007a64:	f7fe fba2 	bl	80061ac <USBD_CDC_TransmitPacket>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	200002e0 	.word	0x200002e0

08007a7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	4613      	mov	r3, r2
 8007a88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2212      	movs	r2, #18
 8007ab0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007ab2:	4b03      	ldr	r3, [pc, #12]	; (8007ac0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	200000cc 	.word	0x200000cc

08007ac4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	6039      	str	r1, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2204      	movs	r2, #4
 8007ad4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ad6:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	200000e0 	.word	0x200000e0

08007ae8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	6039      	str	r1, [r7, #0]
 8007af2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d105      	bne.n	8007b06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4907      	ldr	r1, [pc, #28]	; (8007b1c <USBD_FS_ProductStrDescriptor+0x34>)
 8007afe:	4808      	ldr	r0, [pc, #32]	; (8007b20 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b00:	f7ff fde2 	bl	80076c8 <USBD_GetString>
 8007b04:	e004      	b.n	8007b10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	4904      	ldr	r1, [pc, #16]	; (8007b1c <USBD_FS_ProductStrDescriptor+0x34>)
 8007b0a:	4805      	ldr	r0, [pc, #20]	; (8007b20 <USBD_FS_ProductStrDescriptor+0x38>)
 8007b0c:	f7ff fddc 	bl	80076c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b10:	4b02      	ldr	r3, [pc, #8]	; (8007b1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200015bc 	.word	0x200015bc
 8007b20:	08008c9c 	.word	0x08008c9c

08007b24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	4904      	ldr	r1, [pc, #16]	; (8007b44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007b34:	4804      	ldr	r0, [pc, #16]	; (8007b48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007b36:	f7ff fdc7 	bl	80076c8 <USBD_GetString>
  return USBD_StrDesc;
 8007b3a:	4b02      	ldr	r3, [pc, #8]	; (8007b44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	200015bc 	.word	0x200015bc
 8007b48:	08008cac 	.word	0x08008cac

08007b4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	4603      	mov	r3, r0
 8007b54:	6039      	str	r1, [r7, #0]
 8007b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	221a      	movs	r2, #26
 8007b5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b5e:	f000 f843 	bl	8007be8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b62:	4b02      	ldr	r3, [pc, #8]	; (8007b6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	200000e4 	.word	0x200000e4

08007b70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d105      	bne.n	8007b8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4907      	ldr	r1, [pc, #28]	; (8007ba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b86:	4808      	ldr	r0, [pc, #32]	; (8007ba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b88:	f7ff fd9e 	bl	80076c8 <USBD_GetString>
 8007b8c:	e004      	b.n	8007b98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4904      	ldr	r1, [pc, #16]	; (8007ba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b92:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b94:	f7ff fd98 	bl	80076c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	200015bc 	.word	0x200015bc
 8007ba8:	08008cc0 	.word	0x08008cc0

08007bac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d105      	bne.n	8007bca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	4907      	ldr	r1, [pc, #28]	; (8007be0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bc2:	4808      	ldr	r0, [pc, #32]	; (8007be4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bc4:	f7ff fd80 	bl	80076c8 <USBD_GetString>
 8007bc8:	e004      	b.n	8007bd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4904      	ldr	r1, [pc, #16]	; (8007be0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007bce:	4805      	ldr	r0, [pc, #20]	; (8007be4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007bd0:	f7ff fd7a 	bl	80076c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	200015bc 	.word	0x200015bc
 8007be4:	08008ccc 	.word	0x08008ccc

08007be8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bee:	4b0f      	ldr	r3, [pc, #60]	; (8007c2c <Get_SerialNum+0x44>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <Get_SerialNum+0x48>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007bfa:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <Get_SerialNum+0x4c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4413      	add	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007c0e:	2208      	movs	r2, #8
 8007c10:	4909      	ldr	r1, [pc, #36]	; (8007c38 <Get_SerialNum+0x50>)
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f814 	bl	8007c40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c18:	2204      	movs	r2, #4
 8007c1a:	4908      	ldr	r1, [pc, #32]	; (8007c3c <Get_SerialNum+0x54>)
 8007c1c:	68b8      	ldr	r0, [r7, #8]
 8007c1e:	f000 f80f 	bl	8007c40 <IntToUnicode>
  }
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	1fff7a10 	.word	0x1fff7a10
 8007c30:	1fff7a14 	.word	0x1fff7a14
 8007c34:	1fff7a18 	.word	0x1fff7a18
 8007c38:	200000e6 	.word	0x200000e6
 8007c3c:	200000f6 	.word	0x200000f6

08007c40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c52:	2300      	movs	r3, #0
 8007c54:	75fb      	strb	r3, [r7, #23]
 8007c56:	e027      	b.n	8007ca8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	0f1b      	lsrs	r3, r3, #28
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d80b      	bhi.n	8007c78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	0f1b      	lsrs	r3, r3, #28
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	440b      	add	r3, r1
 8007c70:	3230      	adds	r2, #48	; 0x30
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	e00a      	b.n	8007c8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	0f1b      	lsrs	r3, r3, #28
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	4619      	mov	r1, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	440b      	add	r3, r1
 8007c88:	3237      	adds	r2, #55	; 0x37
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	3301      	adds	r3, #1
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	75fb      	strb	r3, [r7, #23]
 8007ca8:	7dfa      	ldrb	r2, [r7, #23]
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d3d3      	bcc.n	8007c58 <IntToUnicode+0x18>
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
	...

08007cc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	; 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cc8:	f107 0314 	add.w	r3, r7, #20
 8007ccc:	2200      	movs	r2, #0
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	605a      	str	r2, [r3, #4]
 8007cd2:	609a      	str	r2, [r3, #8]
 8007cd4:	60da      	str	r2, [r3, #12]
 8007cd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ce0:	d13a      	bne.n	8007d58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	4a1d      	ldr	r2, [pc, #116]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	613b      	str	r3, [r7, #16]
 8007cfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d04:	2302      	movs	r3, #2
 8007d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007d10:	230a      	movs	r3, #10
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d14:	f107 0314 	add.w	r3, r7, #20
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4812      	ldr	r0, [pc, #72]	; (8007d64 <HAL_PCD_MspInit+0xa4>)
 8007d1c:	f7fa f914 	bl	8001f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007d20:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d24:	4a0e      	ldr	r2, [pc, #56]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2a:	6353      	str	r3, [r2, #52]	; 0x34
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	4b0b      	ldr	r3, [pc, #44]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d34:	4a0a      	ldr	r2, [pc, #40]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8007d3c:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <HAL_PCD_MspInit+0xa0>)
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	2043      	movs	r0, #67	; 0x43
 8007d4e:	f7fa f8c4 	bl	8001eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d52:	2043      	movs	r0, #67	; 0x43
 8007d54:	f7fa f8dd 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d58:	bf00      	nop
 8007d5a:	3728      	adds	r7, #40	; 0x28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	40023800 	.word	0x40023800
 8007d64:	40020000 	.word	0x40020000

08007d68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f7fe fb43 	bl	800640a <USBD_LL_SetupStage>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	78fb      	ldrb	r3, [r7, #3]
 8007db4:	4619      	mov	r1, r3
 8007db6:	f7fe fb7d 	bl	80064b4 <USBD_LL_DataOutStage>
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	4413      	add	r3, r2
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	440b      	add	r3, r1
 8007de2:	334c      	adds	r3, #76	; 0x4c
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	78fb      	ldrb	r3, [r7, #3]
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7fe fc16 	bl	800661a <USBD_LL_DataInStage>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe fd4a 	bl	800689e <USBD_LL_SOF>
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d102      	bne.n	8007e2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007e26:	2300      	movs	r3, #0
 8007e28:	73fb      	strb	r3, [r7, #15]
 8007e2a:	e008      	b.n	8007e3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d102      	bne.n	8007e3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007e34:	2301      	movs	r3, #1
 8007e36:	73fb      	strb	r3, [r7, #15]
 8007e38:	e001      	b.n	8007e3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007e3a:	f7f9 f9c5 	bl	80011c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e44:	7bfa      	ldrb	r2, [r7, #15]
 8007e46:	4611      	mov	r1, r2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fcea 	bl	8006822 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fc92 	bl	800677e <USBD_LL_Reset>
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7fe fce5 	bl	8006842 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6812      	ldr	r2, [r2, #0]
 8007e86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e8a:	f043 0301 	orr.w	r3, r3, #1
 8007e8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e98:	4b04      	ldr	r3, [pc, #16]	; (8007eac <HAL_PCD_SuspendCallback+0x48>)
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	4a03      	ldr	r2, [pc, #12]	; (8007eac <HAL_PCD_SuspendCallback+0x48>)
 8007e9e:	f043 0306 	orr.w	r3, r3, #6
 8007ea2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	e000ed00 	.word	0xe000ed00

08007eb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fcd5 	bl	800686e <USBD_LL_Resume>
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ede:	78fa      	ldrb	r2, [r7, #3]
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe fd2d 	bl	8006942 <USBD_LL_IsoOUTIncomplete>
}
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe fce9 	bl	80068de <USBD_LL_IsoINIncomplete>
}
 8007f0c:	bf00      	nop
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe fd3f 	bl	80069a6 <USBD_LL_DevConnected>
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fd3c 	bl	80069bc <USBD_LL_DevDisconnected>
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d13c      	bne.n	8007fd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007f5c:	4a20      	ldr	r2, [pc, #128]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a1e      	ldr	r2, [pc, #120]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f6c:	4b1c      	ldr	r3, [pc, #112]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007f74:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f76:	2204      	movs	r2, #4
 8007f78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007f7a:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007f80:	4b17      	ldr	r3, [pc, #92]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007f86:	4b16      	ldr	r3, [pc, #88]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f88:	2202      	movs	r2, #2
 8007f8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007f8c:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007f92:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007f98:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007f9e:	4b10      	ldr	r3, [pc, #64]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007fa4:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007faa:	480d      	ldr	r0, [pc, #52]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007fac:	f7fa f968 	bl	8002280 <HAL_PCD_Init>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d001      	beq.n	8007fba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007fb6:	f7f9 f907 	bl	80011c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007fba:	2180      	movs	r1, #128	; 0x80
 8007fbc:	4808      	ldr	r0, [pc, #32]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007fbe:	f7fb fbc0 	bl	8003742 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007fc2:	2240      	movs	r2, #64	; 0x40
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	4806      	ldr	r0, [pc, #24]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007fc8:	f7fb fb74 	bl	80036b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007fcc:	2280      	movs	r2, #128	; 0x80
 8007fce:	2101      	movs	r1, #1
 8007fd0:	4803      	ldr	r0, [pc, #12]	; (8007fe0 <USBD_LL_Init+0x94>)
 8007fd2:	f7fb fb6f 	bl	80036b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	200017bc 	.word	0x200017bc

08007fe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fa fa5d 	bl	80024ba <HAL_PCD_Start>
 8008000:	4603      	mov	r3, r0
 8008002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f942 	bl	8008290 <USBD_Get_USB_Status>
 800800c:	4603      	mov	r3, r0
 800800e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008010:	7bbb      	ldrb	r3, [r7, #14]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	4608      	mov	r0, r1
 8008024:	4611      	mov	r1, r2
 8008026:	461a      	mov	r2, r3
 8008028:	4603      	mov	r3, r0
 800802a:	70fb      	strb	r3, [r7, #3]
 800802c:	460b      	mov	r3, r1
 800802e:	70bb      	strb	r3, [r7, #2]
 8008030:	4613      	mov	r3, r2
 8008032:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008038:	2300      	movs	r3, #0
 800803a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008042:	78bb      	ldrb	r3, [r7, #2]
 8008044:	883a      	ldrh	r2, [r7, #0]
 8008046:	78f9      	ldrb	r1, [r7, #3]
 8008048:	f7fa ff2e 	bl	8002ea8 <HAL_PCD_EP_Open>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 f91c 	bl	8008290 <USBD_Get_USB_Status>
 8008058:	4603      	mov	r3, r0
 800805a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800805c:	7bbb      	ldrb	r3, [r7, #14]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b084      	sub	sp, #16
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008080:	78fa      	ldrb	r2, [r7, #3]
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f7fa ff77 	bl	8002f78 <HAL_PCD_EP_Close>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f8fd 	bl	8008290 <USBD_Get_USB_Status>
 8008096:	4603      	mov	r3, r0
 8008098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800809a:	7bbb      	ldrb	r3, [r7, #14]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080be:	78fa      	ldrb	r2, [r7, #3]
 80080c0:	4611      	mov	r1, r2
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fb f84f 	bl	8003166 <HAL_PCD_EP_SetStall>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f8de 	bl	8008290 <USBD_Get_USB_Status>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	4611      	mov	r1, r2
 8008100:	4618      	mov	r0, r3
 8008102:	f7fb f894 	bl	800322e <HAL_PCD_EP_ClrStall>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f8bf 	bl	8008290 <USBD_Get_USB_Status>
 8008112:	4603      	mov	r3, r0
 8008114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008116:	7bbb      	ldrb	r3, [r7, #14]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008132:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da0b      	bge.n	8008154 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008142:	68f9      	ldr	r1, [r7, #12]
 8008144:	4613      	mov	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	333e      	adds	r3, #62	; 0x3e
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	e00b      	b.n	800816c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800815a:	68f9      	ldr	r1, [r7, #12]
 800815c:	4613      	mov	r3, r2
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4413      	add	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	440b      	add	r3, r1
 8008166:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800816a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008192:	78fa      	ldrb	r2, [r7, #3]
 8008194:	4611      	mov	r1, r2
 8008196:	4618      	mov	r0, r3
 8008198:	f7fa fe61 	bl	8002e5e <HAL_PCD_SetAddress>
 800819c:	4603      	mov	r3, r0
 800819e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 f874 	bl	8008290 <USBD_Get_USB_Status>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	603b      	str	r3, [r7, #0]
 80081c2:	460b      	mov	r3, r1
 80081c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80081d4:	7af9      	ldrb	r1, [r7, #11]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	f7fa ff7a 	bl	80030d2 <HAL_PCD_EP_Transmit>
 80081de:	4603      	mov	r3, r0
 80081e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e2:	7dfb      	ldrb	r3, [r7, #23]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 f853 	bl	8008290 <USBD_Get_USB_Status>
 80081ea:	4603      	mov	r3, r0
 80081ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	607a      	str	r2, [r7, #4]
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	460b      	mov	r3, r1
 8008206:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008216:	7af9      	ldrb	r1, [r7, #11]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	f7fa fef6 	bl	800300c <HAL_PCD_EP_Receive>
 8008220:	4603      	mov	r3, r0
 8008222:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 f832 	bl	8008290 <USBD_Get_USB_Status>
 800822c:	4603      	mov	r3, r0
 800822e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008230:	7dbb      	ldrb	r3, [r7, #22]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7fa ff26 	bl	80030a2 <HAL_PCD_EP_GetRxCount>
 8008256:	4603      	mov	r3, r0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008268:	4b03      	ldr	r3, [pc, #12]	; (8008278 <USBD_static_malloc+0x18>)
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	20001cc8 	.word	0x20001cc8

0800827c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]

}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d817      	bhi.n	80082d4 <USBD_Get_USB_Status+0x44>
 80082a4:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <USBD_Get_USB_Status+0x1c>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	080082bd 	.word	0x080082bd
 80082b0:	080082c3 	.word	0x080082c3
 80082b4:	080082c9 	.word	0x080082c9
 80082b8:	080082cf 	.word	0x080082cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
    break;
 80082c0:	e00b      	b.n	80082da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082c2:	2303      	movs	r3, #3
 80082c4:	73fb      	strb	r3, [r7, #15]
    break;
 80082c6:	e008      	b.n	80082da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
    break;
 80082cc:	e005      	b.n	80082da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082ce:	2303      	movs	r3, #3
 80082d0:	73fb      	strb	r3, [r7, #15]
    break;
 80082d2:	e002      	b.n	80082da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	73fb      	strb	r3, [r7, #15]
    break;
 80082d8:	bf00      	nop
  }
  return usb_status;
 80082da:	7bfb      	ldrb	r3, [r7, #15]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <__errno>:
 80082e8:	4b01      	ldr	r3, [pc, #4]	; (80082f0 <__errno+0x8>)
 80082ea:	6818      	ldr	r0, [r3, #0]
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	20000100 	.word	0x20000100

080082f4 <__libc_init_array>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	4d0d      	ldr	r5, [pc, #52]	; (800832c <__libc_init_array+0x38>)
 80082f8:	4c0d      	ldr	r4, [pc, #52]	; (8008330 <__libc_init_array+0x3c>)
 80082fa:	1b64      	subs	r4, r4, r5
 80082fc:	10a4      	asrs	r4, r4, #2
 80082fe:	2600      	movs	r6, #0
 8008300:	42a6      	cmp	r6, r4
 8008302:	d109      	bne.n	8008318 <__libc_init_array+0x24>
 8008304:	4d0b      	ldr	r5, [pc, #44]	; (8008334 <__libc_init_array+0x40>)
 8008306:	4c0c      	ldr	r4, [pc, #48]	; (8008338 <__libc_init_array+0x44>)
 8008308:	f000 fca2 	bl	8008c50 <_init>
 800830c:	1b64      	subs	r4, r4, r5
 800830e:	10a4      	asrs	r4, r4, #2
 8008310:	2600      	movs	r6, #0
 8008312:	42a6      	cmp	r6, r4
 8008314:	d105      	bne.n	8008322 <__libc_init_array+0x2e>
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	f855 3b04 	ldr.w	r3, [r5], #4
 800831c:	4798      	blx	r3
 800831e:	3601      	adds	r6, #1
 8008320:	e7ee      	b.n	8008300 <__libc_init_array+0xc>
 8008322:	f855 3b04 	ldr.w	r3, [r5], #4
 8008326:	4798      	blx	r3
 8008328:	3601      	adds	r6, #1
 800832a:	e7f2      	b.n	8008312 <__libc_init_array+0x1e>
 800832c:	08008d28 	.word	0x08008d28
 8008330:	08008d28 	.word	0x08008d28
 8008334:	08008d28 	.word	0x08008d28
 8008338:	08008d2c 	.word	0x08008d2c

0800833c <memcpy>:
 800833c:	440a      	add	r2, r1
 800833e:	4291      	cmp	r1, r2
 8008340:	f100 33ff 	add.w	r3, r0, #4294967295
 8008344:	d100      	bne.n	8008348 <memcpy+0xc>
 8008346:	4770      	bx	lr
 8008348:	b510      	push	{r4, lr}
 800834a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800834e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008352:	4291      	cmp	r1, r2
 8008354:	d1f9      	bne.n	800834a <memcpy+0xe>
 8008356:	bd10      	pop	{r4, pc}

08008358 <memset>:
 8008358:	4402      	add	r2, r0
 800835a:	4603      	mov	r3, r0
 800835c:	4293      	cmp	r3, r2
 800835e:	d100      	bne.n	8008362 <memset+0xa>
 8008360:	4770      	bx	lr
 8008362:	f803 1b01 	strb.w	r1, [r3], #1
 8008366:	e7f9      	b.n	800835c <memset+0x4>

08008368 <sniprintf>:
 8008368:	b40c      	push	{r2, r3}
 800836a:	b530      	push	{r4, r5, lr}
 800836c:	4b17      	ldr	r3, [pc, #92]	; (80083cc <sniprintf+0x64>)
 800836e:	1e0c      	subs	r4, r1, #0
 8008370:	681d      	ldr	r5, [r3, #0]
 8008372:	b09d      	sub	sp, #116	; 0x74
 8008374:	da08      	bge.n	8008388 <sniprintf+0x20>
 8008376:	238b      	movs	r3, #139	; 0x8b
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	f04f 30ff 	mov.w	r0, #4294967295
 800837e:	b01d      	add	sp, #116	; 0x74
 8008380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008384:	b002      	add	sp, #8
 8008386:	4770      	bx	lr
 8008388:	f44f 7302 	mov.w	r3, #520	; 0x208
 800838c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008390:	bf14      	ite	ne
 8008392:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008396:	4623      	moveq	r3, r4
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	9307      	str	r3, [sp, #28]
 800839c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083a0:	9002      	str	r0, [sp, #8]
 80083a2:	9006      	str	r0, [sp, #24]
 80083a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80083a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80083aa:	ab21      	add	r3, sp, #132	; 0x84
 80083ac:	a902      	add	r1, sp, #8
 80083ae:	4628      	mov	r0, r5
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	f000 f869 	bl	8008488 <_svfiprintf_r>
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	bfbc      	itt	lt
 80083ba:	238b      	movlt	r3, #139	; 0x8b
 80083bc:	602b      	strlt	r3, [r5, #0]
 80083be:	2c00      	cmp	r4, #0
 80083c0:	d0dd      	beq.n	800837e <sniprintf+0x16>
 80083c2:	9b02      	ldr	r3, [sp, #8]
 80083c4:	2200      	movs	r2, #0
 80083c6:	701a      	strb	r2, [r3, #0]
 80083c8:	e7d9      	b.n	800837e <sniprintf+0x16>
 80083ca:	bf00      	nop
 80083cc:	20000100 	.word	0x20000100

080083d0 <__ssputs_r>:
 80083d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	688e      	ldr	r6, [r1, #8]
 80083d6:	429e      	cmp	r6, r3
 80083d8:	4682      	mov	sl, r0
 80083da:	460c      	mov	r4, r1
 80083dc:	4690      	mov	r8, r2
 80083de:	461f      	mov	r7, r3
 80083e0:	d838      	bhi.n	8008454 <__ssputs_r+0x84>
 80083e2:	898a      	ldrh	r2, [r1, #12]
 80083e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083e8:	d032      	beq.n	8008450 <__ssputs_r+0x80>
 80083ea:	6825      	ldr	r5, [r4, #0]
 80083ec:	6909      	ldr	r1, [r1, #16]
 80083ee:	eba5 0901 	sub.w	r9, r5, r1
 80083f2:	6965      	ldr	r5, [r4, #20]
 80083f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083fc:	3301      	adds	r3, #1
 80083fe:	444b      	add	r3, r9
 8008400:	106d      	asrs	r5, r5, #1
 8008402:	429d      	cmp	r5, r3
 8008404:	bf38      	it	cc
 8008406:	461d      	movcc	r5, r3
 8008408:	0553      	lsls	r3, r2, #21
 800840a:	d531      	bpl.n	8008470 <__ssputs_r+0xa0>
 800840c:	4629      	mov	r1, r5
 800840e:	f000 fb55 	bl	8008abc <_malloc_r>
 8008412:	4606      	mov	r6, r0
 8008414:	b950      	cbnz	r0, 800842c <__ssputs_r+0x5c>
 8008416:	230c      	movs	r3, #12
 8008418:	f8ca 3000 	str.w	r3, [sl]
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008422:	81a3      	strh	r3, [r4, #12]
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800842c:	6921      	ldr	r1, [r4, #16]
 800842e:	464a      	mov	r2, r9
 8008430:	f7ff ff84 	bl	800833c <memcpy>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800843a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800843e:	81a3      	strh	r3, [r4, #12]
 8008440:	6126      	str	r6, [r4, #16]
 8008442:	6165      	str	r5, [r4, #20]
 8008444:	444e      	add	r6, r9
 8008446:	eba5 0509 	sub.w	r5, r5, r9
 800844a:	6026      	str	r6, [r4, #0]
 800844c:	60a5      	str	r5, [r4, #8]
 800844e:	463e      	mov	r6, r7
 8008450:	42be      	cmp	r6, r7
 8008452:	d900      	bls.n	8008456 <__ssputs_r+0x86>
 8008454:	463e      	mov	r6, r7
 8008456:	6820      	ldr	r0, [r4, #0]
 8008458:	4632      	mov	r2, r6
 800845a:	4641      	mov	r1, r8
 800845c:	f000 faa8 	bl	80089b0 <memmove>
 8008460:	68a3      	ldr	r3, [r4, #8]
 8008462:	1b9b      	subs	r3, r3, r6
 8008464:	60a3      	str	r3, [r4, #8]
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	4433      	add	r3, r6
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	2000      	movs	r0, #0
 800846e:	e7db      	b.n	8008428 <__ssputs_r+0x58>
 8008470:	462a      	mov	r2, r5
 8008472:	f000 fb97 	bl	8008ba4 <_realloc_r>
 8008476:	4606      	mov	r6, r0
 8008478:	2800      	cmp	r0, #0
 800847a:	d1e1      	bne.n	8008440 <__ssputs_r+0x70>
 800847c:	6921      	ldr	r1, [r4, #16]
 800847e:	4650      	mov	r0, sl
 8008480:	f000 fab0 	bl	80089e4 <_free_r>
 8008484:	e7c7      	b.n	8008416 <__ssputs_r+0x46>
	...

08008488 <_svfiprintf_r>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	4698      	mov	r8, r3
 800848e:	898b      	ldrh	r3, [r1, #12]
 8008490:	061b      	lsls	r3, r3, #24
 8008492:	b09d      	sub	sp, #116	; 0x74
 8008494:	4607      	mov	r7, r0
 8008496:	460d      	mov	r5, r1
 8008498:	4614      	mov	r4, r2
 800849a:	d50e      	bpl.n	80084ba <_svfiprintf_r+0x32>
 800849c:	690b      	ldr	r3, [r1, #16]
 800849e:	b963      	cbnz	r3, 80084ba <_svfiprintf_r+0x32>
 80084a0:	2140      	movs	r1, #64	; 0x40
 80084a2:	f000 fb0b 	bl	8008abc <_malloc_r>
 80084a6:	6028      	str	r0, [r5, #0]
 80084a8:	6128      	str	r0, [r5, #16]
 80084aa:	b920      	cbnz	r0, 80084b6 <_svfiprintf_r+0x2e>
 80084ac:	230c      	movs	r3, #12
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	f04f 30ff 	mov.w	r0, #4294967295
 80084b4:	e0d1      	b.n	800865a <_svfiprintf_r+0x1d2>
 80084b6:	2340      	movs	r3, #64	; 0x40
 80084b8:	616b      	str	r3, [r5, #20]
 80084ba:	2300      	movs	r3, #0
 80084bc:	9309      	str	r3, [sp, #36]	; 0x24
 80084be:	2320      	movs	r3, #32
 80084c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084c8:	2330      	movs	r3, #48	; 0x30
 80084ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008674 <_svfiprintf_r+0x1ec>
 80084ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084d2:	f04f 0901 	mov.w	r9, #1
 80084d6:	4623      	mov	r3, r4
 80084d8:	469a      	mov	sl, r3
 80084da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084de:	b10a      	cbz	r2, 80084e4 <_svfiprintf_r+0x5c>
 80084e0:	2a25      	cmp	r2, #37	; 0x25
 80084e2:	d1f9      	bne.n	80084d8 <_svfiprintf_r+0x50>
 80084e4:	ebba 0b04 	subs.w	fp, sl, r4
 80084e8:	d00b      	beq.n	8008502 <_svfiprintf_r+0x7a>
 80084ea:	465b      	mov	r3, fp
 80084ec:	4622      	mov	r2, r4
 80084ee:	4629      	mov	r1, r5
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff ff6d 	bl	80083d0 <__ssputs_r>
 80084f6:	3001      	adds	r0, #1
 80084f8:	f000 80aa 	beq.w	8008650 <_svfiprintf_r+0x1c8>
 80084fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084fe:	445a      	add	r2, fp
 8008500:	9209      	str	r2, [sp, #36]	; 0x24
 8008502:	f89a 3000 	ldrb.w	r3, [sl]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80a2 	beq.w	8008650 <_svfiprintf_r+0x1c8>
 800850c:	2300      	movs	r3, #0
 800850e:	f04f 32ff 	mov.w	r2, #4294967295
 8008512:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008516:	f10a 0a01 	add.w	sl, sl, #1
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	9307      	str	r3, [sp, #28]
 800851e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008522:	931a      	str	r3, [sp, #104]	; 0x68
 8008524:	4654      	mov	r4, sl
 8008526:	2205      	movs	r2, #5
 8008528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852c:	4851      	ldr	r0, [pc, #324]	; (8008674 <_svfiprintf_r+0x1ec>)
 800852e:	f7f7 fe57 	bl	80001e0 <memchr>
 8008532:	9a04      	ldr	r2, [sp, #16]
 8008534:	b9d8      	cbnz	r0, 800856e <_svfiprintf_r+0xe6>
 8008536:	06d0      	lsls	r0, r2, #27
 8008538:	bf44      	itt	mi
 800853a:	2320      	movmi	r3, #32
 800853c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008540:	0711      	lsls	r1, r2, #28
 8008542:	bf44      	itt	mi
 8008544:	232b      	movmi	r3, #43	; 0x2b
 8008546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800854a:	f89a 3000 	ldrb.w	r3, [sl]
 800854e:	2b2a      	cmp	r3, #42	; 0x2a
 8008550:	d015      	beq.n	800857e <_svfiprintf_r+0xf6>
 8008552:	9a07      	ldr	r2, [sp, #28]
 8008554:	4654      	mov	r4, sl
 8008556:	2000      	movs	r0, #0
 8008558:	f04f 0c0a 	mov.w	ip, #10
 800855c:	4621      	mov	r1, r4
 800855e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008562:	3b30      	subs	r3, #48	; 0x30
 8008564:	2b09      	cmp	r3, #9
 8008566:	d94e      	bls.n	8008606 <_svfiprintf_r+0x17e>
 8008568:	b1b0      	cbz	r0, 8008598 <_svfiprintf_r+0x110>
 800856a:	9207      	str	r2, [sp, #28]
 800856c:	e014      	b.n	8008598 <_svfiprintf_r+0x110>
 800856e:	eba0 0308 	sub.w	r3, r0, r8
 8008572:	fa09 f303 	lsl.w	r3, r9, r3
 8008576:	4313      	orrs	r3, r2
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	46a2      	mov	sl, r4
 800857c:	e7d2      	b.n	8008524 <_svfiprintf_r+0x9c>
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	1d19      	adds	r1, r3, #4
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	9103      	str	r1, [sp, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfbb      	ittet	lt
 800858a:	425b      	neglt	r3, r3
 800858c:	f042 0202 	orrlt.w	r2, r2, #2
 8008590:	9307      	strge	r3, [sp, #28]
 8008592:	9307      	strlt	r3, [sp, #28]
 8008594:	bfb8      	it	lt
 8008596:	9204      	strlt	r2, [sp, #16]
 8008598:	7823      	ldrb	r3, [r4, #0]
 800859a:	2b2e      	cmp	r3, #46	; 0x2e
 800859c:	d10c      	bne.n	80085b8 <_svfiprintf_r+0x130>
 800859e:	7863      	ldrb	r3, [r4, #1]
 80085a0:	2b2a      	cmp	r3, #42	; 0x2a
 80085a2:	d135      	bne.n	8008610 <_svfiprintf_r+0x188>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	1d1a      	adds	r2, r3, #4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	9203      	str	r2, [sp, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bfb8      	it	lt
 80085b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80085b4:	3402      	adds	r4, #2
 80085b6:	9305      	str	r3, [sp, #20]
 80085b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008684 <_svfiprintf_r+0x1fc>
 80085bc:	7821      	ldrb	r1, [r4, #0]
 80085be:	2203      	movs	r2, #3
 80085c0:	4650      	mov	r0, sl
 80085c2:	f7f7 fe0d 	bl	80001e0 <memchr>
 80085c6:	b140      	cbz	r0, 80085da <_svfiprintf_r+0x152>
 80085c8:	2340      	movs	r3, #64	; 0x40
 80085ca:	eba0 000a 	sub.w	r0, r0, sl
 80085ce:	fa03 f000 	lsl.w	r0, r3, r0
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	4303      	orrs	r3, r0
 80085d6:	3401      	adds	r4, #1
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085de:	4826      	ldr	r0, [pc, #152]	; (8008678 <_svfiprintf_r+0x1f0>)
 80085e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085e4:	2206      	movs	r2, #6
 80085e6:	f7f7 fdfb 	bl	80001e0 <memchr>
 80085ea:	2800      	cmp	r0, #0
 80085ec:	d038      	beq.n	8008660 <_svfiprintf_r+0x1d8>
 80085ee:	4b23      	ldr	r3, [pc, #140]	; (800867c <_svfiprintf_r+0x1f4>)
 80085f0:	bb1b      	cbnz	r3, 800863a <_svfiprintf_r+0x1b2>
 80085f2:	9b03      	ldr	r3, [sp, #12]
 80085f4:	3307      	adds	r3, #7
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	3308      	adds	r3, #8
 80085fc:	9303      	str	r3, [sp, #12]
 80085fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008600:	4433      	add	r3, r6
 8008602:	9309      	str	r3, [sp, #36]	; 0x24
 8008604:	e767      	b.n	80084d6 <_svfiprintf_r+0x4e>
 8008606:	fb0c 3202 	mla	r2, ip, r2, r3
 800860a:	460c      	mov	r4, r1
 800860c:	2001      	movs	r0, #1
 800860e:	e7a5      	b.n	800855c <_svfiprintf_r+0xd4>
 8008610:	2300      	movs	r3, #0
 8008612:	3401      	adds	r4, #1
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	4619      	mov	r1, r3
 8008618:	f04f 0c0a 	mov.w	ip, #10
 800861c:	4620      	mov	r0, r4
 800861e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008622:	3a30      	subs	r2, #48	; 0x30
 8008624:	2a09      	cmp	r2, #9
 8008626:	d903      	bls.n	8008630 <_svfiprintf_r+0x1a8>
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0c5      	beq.n	80085b8 <_svfiprintf_r+0x130>
 800862c:	9105      	str	r1, [sp, #20]
 800862e:	e7c3      	b.n	80085b8 <_svfiprintf_r+0x130>
 8008630:	fb0c 2101 	mla	r1, ip, r1, r2
 8008634:	4604      	mov	r4, r0
 8008636:	2301      	movs	r3, #1
 8008638:	e7f0      	b.n	800861c <_svfiprintf_r+0x194>
 800863a:	ab03      	add	r3, sp, #12
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	462a      	mov	r2, r5
 8008640:	4b0f      	ldr	r3, [pc, #60]	; (8008680 <_svfiprintf_r+0x1f8>)
 8008642:	a904      	add	r1, sp, #16
 8008644:	4638      	mov	r0, r7
 8008646:	f3af 8000 	nop.w
 800864a:	1c42      	adds	r2, r0, #1
 800864c:	4606      	mov	r6, r0
 800864e:	d1d6      	bne.n	80085fe <_svfiprintf_r+0x176>
 8008650:	89ab      	ldrh	r3, [r5, #12]
 8008652:	065b      	lsls	r3, r3, #25
 8008654:	f53f af2c 	bmi.w	80084b0 <_svfiprintf_r+0x28>
 8008658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800865a:	b01d      	add	sp, #116	; 0x74
 800865c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008660:	ab03      	add	r3, sp, #12
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	462a      	mov	r2, r5
 8008666:	4b06      	ldr	r3, [pc, #24]	; (8008680 <_svfiprintf_r+0x1f8>)
 8008668:	a904      	add	r1, sp, #16
 800866a:	4638      	mov	r0, r7
 800866c:	f000 f87a 	bl	8008764 <_printf_i>
 8008670:	e7eb      	b.n	800864a <_svfiprintf_r+0x1c2>
 8008672:	bf00      	nop
 8008674:	08008cec 	.word	0x08008cec
 8008678:	08008cf6 	.word	0x08008cf6
 800867c:	00000000 	.word	0x00000000
 8008680:	080083d1 	.word	0x080083d1
 8008684:	08008cf2 	.word	0x08008cf2

08008688 <_printf_common>:
 8008688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800868c:	4616      	mov	r6, r2
 800868e:	4699      	mov	r9, r3
 8008690:	688a      	ldr	r2, [r1, #8]
 8008692:	690b      	ldr	r3, [r1, #16]
 8008694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008698:	4293      	cmp	r3, r2
 800869a:	bfb8      	it	lt
 800869c:	4613      	movlt	r3, r2
 800869e:	6033      	str	r3, [r6, #0]
 80086a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086a4:	4607      	mov	r7, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	b10a      	cbz	r2, 80086ae <_printf_common+0x26>
 80086aa:	3301      	adds	r3, #1
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	0699      	lsls	r1, r3, #26
 80086b2:	bf42      	ittt	mi
 80086b4:	6833      	ldrmi	r3, [r6, #0]
 80086b6:	3302      	addmi	r3, #2
 80086b8:	6033      	strmi	r3, [r6, #0]
 80086ba:	6825      	ldr	r5, [r4, #0]
 80086bc:	f015 0506 	ands.w	r5, r5, #6
 80086c0:	d106      	bne.n	80086d0 <_printf_common+0x48>
 80086c2:	f104 0a19 	add.w	sl, r4, #25
 80086c6:	68e3      	ldr	r3, [r4, #12]
 80086c8:	6832      	ldr	r2, [r6, #0]
 80086ca:	1a9b      	subs	r3, r3, r2
 80086cc:	42ab      	cmp	r3, r5
 80086ce:	dc26      	bgt.n	800871e <_printf_common+0x96>
 80086d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086d4:	1e13      	subs	r3, r2, #0
 80086d6:	6822      	ldr	r2, [r4, #0]
 80086d8:	bf18      	it	ne
 80086da:	2301      	movne	r3, #1
 80086dc:	0692      	lsls	r2, r2, #26
 80086de:	d42b      	bmi.n	8008738 <_printf_common+0xb0>
 80086e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086e4:	4649      	mov	r1, r9
 80086e6:	4638      	mov	r0, r7
 80086e8:	47c0      	blx	r8
 80086ea:	3001      	adds	r0, #1
 80086ec:	d01e      	beq.n	800872c <_printf_common+0xa4>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	68e5      	ldr	r5, [r4, #12]
 80086f2:	6832      	ldr	r2, [r6, #0]
 80086f4:	f003 0306 	and.w	r3, r3, #6
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	bf08      	it	eq
 80086fc:	1aad      	subeq	r5, r5, r2
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	6922      	ldr	r2, [r4, #16]
 8008702:	bf0c      	ite	eq
 8008704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008708:	2500      	movne	r5, #0
 800870a:	4293      	cmp	r3, r2
 800870c:	bfc4      	itt	gt
 800870e:	1a9b      	subgt	r3, r3, r2
 8008710:	18ed      	addgt	r5, r5, r3
 8008712:	2600      	movs	r6, #0
 8008714:	341a      	adds	r4, #26
 8008716:	42b5      	cmp	r5, r6
 8008718:	d11a      	bne.n	8008750 <_printf_common+0xc8>
 800871a:	2000      	movs	r0, #0
 800871c:	e008      	b.n	8008730 <_printf_common+0xa8>
 800871e:	2301      	movs	r3, #1
 8008720:	4652      	mov	r2, sl
 8008722:	4649      	mov	r1, r9
 8008724:	4638      	mov	r0, r7
 8008726:	47c0      	blx	r8
 8008728:	3001      	adds	r0, #1
 800872a:	d103      	bne.n	8008734 <_printf_common+0xac>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008734:	3501      	adds	r5, #1
 8008736:	e7c6      	b.n	80086c6 <_printf_common+0x3e>
 8008738:	18e1      	adds	r1, r4, r3
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	2030      	movs	r0, #48	; 0x30
 800873e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008742:	4422      	add	r2, r4
 8008744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800874c:	3302      	adds	r3, #2
 800874e:	e7c7      	b.n	80086e0 <_printf_common+0x58>
 8008750:	2301      	movs	r3, #1
 8008752:	4622      	mov	r2, r4
 8008754:	4649      	mov	r1, r9
 8008756:	4638      	mov	r0, r7
 8008758:	47c0      	blx	r8
 800875a:	3001      	adds	r0, #1
 800875c:	d0e6      	beq.n	800872c <_printf_common+0xa4>
 800875e:	3601      	adds	r6, #1
 8008760:	e7d9      	b.n	8008716 <_printf_common+0x8e>
	...

08008764 <_printf_i>:
 8008764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	7e0f      	ldrb	r7, [r1, #24]
 800876a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800876c:	2f78      	cmp	r7, #120	; 0x78
 800876e:	4691      	mov	r9, r2
 8008770:	4680      	mov	r8, r0
 8008772:	460c      	mov	r4, r1
 8008774:	469a      	mov	sl, r3
 8008776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800877a:	d807      	bhi.n	800878c <_printf_i+0x28>
 800877c:	2f62      	cmp	r7, #98	; 0x62
 800877e:	d80a      	bhi.n	8008796 <_printf_i+0x32>
 8008780:	2f00      	cmp	r7, #0
 8008782:	f000 80d8 	beq.w	8008936 <_printf_i+0x1d2>
 8008786:	2f58      	cmp	r7, #88	; 0x58
 8008788:	f000 80a3 	beq.w	80088d2 <_printf_i+0x16e>
 800878c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008794:	e03a      	b.n	800880c <_printf_i+0xa8>
 8008796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800879a:	2b15      	cmp	r3, #21
 800879c:	d8f6      	bhi.n	800878c <_printf_i+0x28>
 800879e:	a101      	add	r1, pc, #4	; (adr r1, 80087a4 <_printf_i+0x40>)
 80087a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087a4:	080087fd 	.word	0x080087fd
 80087a8:	08008811 	.word	0x08008811
 80087ac:	0800878d 	.word	0x0800878d
 80087b0:	0800878d 	.word	0x0800878d
 80087b4:	0800878d 	.word	0x0800878d
 80087b8:	0800878d 	.word	0x0800878d
 80087bc:	08008811 	.word	0x08008811
 80087c0:	0800878d 	.word	0x0800878d
 80087c4:	0800878d 	.word	0x0800878d
 80087c8:	0800878d 	.word	0x0800878d
 80087cc:	0800878d 	.word	0x0800878d
 80087d0:	0800891d 	.word	0x0800891d
 80087d4:	08008841 	.word	0x08008841
 80087d8:	080088ff 	.word	0x080088ff
 80087dc:	0800878d 	.word	0x0800878d
 80087e0:	0800878d 	.word	0x0800878d
 80087e4:	0800893f 	.word	0x0800893f
 80087e8:	0800878d 	.word	0x0800878d
 80087ec:	08008841 	.word	0x08008841
 80087f0:	0800878d 	.word	0x0800878d
 80087f4:	0800878d 	.word	0x0800878d
 80087f8:	08008907 	.word	0x08008907
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	1d1a      	adds	r2, r3, #4
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	602a      	str	r2, [r5, #0]
 8008804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800880c:	2301      	movs	r3, #1
 800880e:	e0a3      	b.n	8008958 <_printf_i+0x1f4>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	6829      	ldr	r1, [r5, #0]
 8008814:	0606      	lsls	r6, r0, #24
 8008816:	f101 0304 	add.w	r3, r1, #4
 800881a:	d50a      	bpl.n	8008832 <_printf_i+0xce>
 800881c:	680e      	ldr	r6, [r1, #0]
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	2e00      	cmp	r6, #0
 8008822:	da03      	bge.n	800882c <_printf_i+0xc8>
 8008824:	232d      	movs	r3, #45	; 0x2d
 8008826:	4276      	negs	r6, r6
 8008828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800882c:	485e      	ldr	r0, [pc, #376]	; (80089a8 <_printf_i+0x244>)
 800882e:	230a      	movs	r3, #10
 8008830:	e019      	b.n	8008866 <_printf_i+0x102>
 8008832:	680e      	ldr	r6, [r1, #0]
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800883a:	bf18      	it	ne
 800883c:	b236      	sxthne	r6, r6
 800883e:	e7ef      	b.n	8008820 <_printf_i+0xbc>
 8008840:	682b      	ldr	r3, [r5, #0]
 8008842:	6820      	ldr	r0, [r4, #0]
 8008844:	1d19      	adds	r1, r3, #4
 8008846:	6029      	str	r1, [r5, #0]
 8008848:	0601      	lsls	r1, r0, #24
 800884a:	d501      	bpl.n	8008850 <_printf_i+0xec>
 800884c:	681e      	ldr	r6, [r3, #0]
 800884e:	e002      	b.n	8008856 <_printf_i+0xf2>
 8008850:	0646      	lsls	r6, r0, #25
 8008852:	d5fb      	bpl.n	800884c <_printf_i+0xe8>
 8008854:	881e      	ldrh	r6, [r3, #0]
 8008856:	4854      	ldr	r0, [pc, #336]	; (80089a8 <_printf_i+0x244>)
 8008858:	2f6f      	cmp	r7, #111	; 0x6f
 800885a:	bf0c      	ite	eq
 800885c:	2308      	moveq	r3, #8
 800885e:	230a      	movne	r3, #10
 8008860:	2100      	movs	r1, #0
 8008862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008866:	6865      	ldr	r5, [r4, #4]
 8008868:	60a5      	str	r5, [r4, #8]
 800886a:	2d00      	cmp	r5, #0
 800886c:	bfa2      	ittt	ge
 800886e:	6821      	ldrge	r1, [r4, #0]
 8008870:	f021 0104 	bicge.w	r1, r1, #4
 8008874:	6021      	strge	r1, [r4, #0]
 8008876:	b90e      	cbnz	r6, 800887c <_printf_i+0x118>
 8008878:	2d00      	cmp	r5, #0
 800887a:	d04d      	beq.n	8008918 <_printf_i+0x1b4>
 800887c:	4615      	mov	r5, r2
 800887e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008882:	fb03 6711 	mls	r7, r3, r1, r6
 8008886:	5dc7      	ldrb	r7, [r0, r7]
 8008888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800888c:	4637      	mov	r7, r6
 800888e:	42bb      	cmp	r3, r7
 8008890:	460e      	mov	r6, r1
 8008892:	d9f4      	bls.n	800887e <_printf_i+0x11a>
 8008894:	2b08      	cmp	r3, #8
 8008896:	d10b      	bne.n	80088b0 <_printf_i+0x14c>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	07de      	lsls	r6, r3, #31
 800889c:	d508      	bpl.n	80088b0 <_printf_i+0x14c>
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	6861      	ldr	r1, [r4, #4]
 80088a2:	4299      	cmp	r1, r3
 80088a4:	bfde      	ittt	le
 80088a6:	2330      	movle	r3, #48	; 0x30
 80088a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088b0:	1b52      	subs	r2, r2, r5
 80088b2:	6122      	str	r2, [r4, #16]
 80088b4:	f8cd a000 	str.w	sl, [sp]
 80088b8:	464b      	mov	r3, r9
 80088ba:	aa03      	add	r2, sp, #12
 80088bc:	4621      	mov	r1, r4
 80088be:	4640      	mov	r0, r8
 80088c0:	f7ff fee2 	bl	8008688 <_printf_common>
 80088c4:	3001      	adds	r0, #1
 80088c6:	d14c      	bne.n	8008962 <_printf_i+0x1fe>
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	b004      	add	sp, #16
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d2:	4835      	ldr	r0, [pc, #212]	; (80089a8 <_printf_i+0x244>)
 80088d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088d8:	6829      	ldr	r1, [r5, #0]
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80088e0:	6029      	str	r1, [r5, #0]
 80088e2:	061d      	lsls	r5, r3, #24
 80088e4:	d514      	bpl.n	8008910 <_printf_i+0x1ac>
 80088e6:	07df      	lsls	r7, r3, #31
 80088e8:	bf44      	itt	mi
 80088ea:	f043 0320 	orrmi.w	r3, r3, #32
 80088ee:	6023      	strmi	r3, [r4, #0]
 80088f0:	b91e      	cbnz	r6, 80088fa <_printf_i+0x196>
 80088f2:	6823      	ldr	r3, [r4, #0]
 80088f4:	f023 0320 	bic.w	r3, r3, #32
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	2310      	movs	r3, #16
 80088fc:	e7b0      	b.n	8008860 <_printf_i+0xfc>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	f043 0320 	orr.w	r3, r3, #32
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	2378      	movs	r3, #120	; 0x78
 8008908:	4828      	ldr	r0, [pc, #160]	; (80089ac <_printf_i+0x248>)
 800890a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800890e:	e7e3      	b.n	80088d8 <_printf_i+0x174>
 8008910:	0659      	lsls	r1, r3, #25
 8008912:	bf48      	it	mi
 8008914:	b2b6      	uxthmi	r6, r6
 8008916:	e7e6      	b.n	80088e6 <_printf_i+0x182>
 8008918:	4615      	mov	r5, r2
 800891a:	e7bb      	b.n	8008894 <_printf_i+0x130>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	6826      	ldr	r6, [r4, #0]
 8008920:	6961      	ldr	r1, [r4, #20]
 8008922:	1d18      	adds	r0, r3, #4
 8008924:	6028      	str	r0, [r5, #0]
 8008926:	0635      	lsls	r5, r6, #24
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	d501      	bpl.n	8008930 <_printf_i+0x1cc>
 800892c:	6019      	str	r1, [r3, #0]
 800892e:	e002      	b.n	8008936 <_printf_i+0x1d2>
 8008930:	0670      	lsls	r0, r6, #25
 8008932:	d5fb      	bpl.n	800892c <_printf_i+0x1c8>
 8008934:	8019      	strh	r1, [r3, #0]
 8008936:	2300      	movs	r3, #0
 8008938:	6123      	str	r3, [r4, #16]
 800893a:	4615      	mov	r5, r2
 800893c:	e7ba      	b.n	80088b4 <_printf_i+0x150>
 800893e:	682b      	ldr	r3, [r5, #0]
 8008940:	1d1a      	adds	r2, r3, #4
 8008942:	602a      	str	r2, [r5, #0]
 8008944:	681d      	ldr	r5, [r3, #0]
 8008946:	6862      	ldr	r2, [r4, #4]
 8008948:	2100      	movs	r1, #0
 800894a:	4628      	mov	r0, r5
 800894c:	f7f7 fc48 	bl	80001e0 <memchr>
 8008950:	b108      	cbz	r0, 8008956 <_printf_i+0x1f2>
 8008952:	1b40      	subs	r0, r0, r5
 8008954:	6060      	str	r0, [r4, #4]
 8008956:	6863      	ldr	r3, [r4, #4]
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	2300      	movs	r3, #0
 800895c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008960:	e7a8      	b.n	80088b4 <_printf_i+0x150>
 8008962:	6923      	ldr	r3, [r4, #16]
 8008964:	462a      	mov	r2, r5
 8008966:	4649      	mov	r1, r9
 8008968:	4640      	mov	r0, r8
 800896a:	47d0      	blx	sl
 800896c:	3001      	adds	r0, #1
 800896e:	d0ab      	beq.n	80088c8 <_printf_i+0x164>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	079b      	lsls	r3, r3, #30
 8008974:	d413      	bmi.n	800899e <_printf_i+0x23a>
 8008976:	68e0      	ldr	r0, [r4, #12]
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	4298      	cmp	r0, r3
 800897c:	bfb8      	it	lt
 800897e:	4618      	movlt	r0, r3
 8008980:	e7a4      	b.n	80088cc <_printf_i+0x168>
 8008982:	2301      	movs	r3, #1
 8008984:	4632      	mov	r2, r6
 8008986:	4649      	mov	r1, r9
 8008988:	4640      	mov	r0, r8
 800898a:	47d0      	blx	sl
 800898c:	3001      	adds	r0, #1
 800898e:	d09b      	beq.n	80088c8 <_printf_i+0x164>
 8008990:	3501      	adds	r5, #1
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	9903      	ldr	r1, [sp, #12]
 8008996:	1a5b      	subs	r3, r3, r1
 8008998:	42ab      	cmp	r3, r5
 800899a:	dcf2      	bgt.n	8008982 <_printf_i+0x21e>
 800899c:	e7eb      	b.n	8008976 <_printf_i+0x212>
 800899e:	2500      	movs	r5, #0
 80089a0:	f104 0619 	add.w	r6, r4, #25
 80089a4:	e7f5      	b.n	8008992 <_printf_i+0x22e>
 80089a6:	bf00      	nop
 80089a8:	08008cfd 	.word	0x08008cfd
 80089ac:	08008d0e 	.word	0x08008d0e

080089b0 <memmove>:
 80089b0:	4288      	cmp	r0, r1
 80089b2:	b510      	push	{r4, lr}
 80089b4:	eb01 0402 	add.w	r4, r1, r2
 80089b8:	d902      	bls.n	80089c0 <memmove+0x10>
 80089ba:	4284      	cmp	r4, r0
 80089bc:	4623      	mov	r3, r4
 80089be:	d807      	bhi.n	80089d0 <memmove+0x20>
 80089c0:	1e43      	subs	r3, r0, #1
 80089c2:	42a1      	cmp	r1, r4
 80089c4:	d008      	beq.n	80089d8 <memmove+0x28>
 80089c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089ce:	e7f8      	b.n	80089c2 <memmove+0x12>
 80089d0:	4402      	add	r2, r0
 80089d2:	4601      	mov	r1, r0
 80089d4:	428a      	cmp	r2, r1
 80089d6:	d100      	bne.n	80089da <memmove+0x2a>
 80089d8:	bd10      	pop	{r4, pc}
 80089da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089e2:	e7f7      	b.n	80089d4 <memmove+0x24>

080089e4 <_free_r>:
 80089e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e6:	2900      	cmp	r1, #0
 80089e8:	d044      	beq.n	8008a74 <_free_r+0x90>
 80089ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ee:	9001      	str	r0, [sp, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f1a1 0404 	sub.w	r4, r1, #4
 80089f6:	bfb8      	it	lt
 80089f8:	18e4      	addlt	r4, r4, r3
 80089fa:	f000 f913 	bl	8008c24 <__malloc_lock>
 80089fe:	4a1e      	ldr	r2, [pc, #120]	; (8008a78 <_free_r+0x94>)
 8008a00:	9801      	ldr	r0, [sp, #4]
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	b933      	cbnz	r3, 8008a14 <_free_r+0x30>
 8008a06:	6063      	str	r3, [r4, #4]
 8008a08:	6014      	str	r4, [r2, #0]
 8008a0a:	b003      	add	sp, #12
 8008a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a10:	f000 b90e 	b.w	8008c30 <__malloc_unlock>
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	d908      	bls.n	8008a2a <_free_r+0x46>
 8008a18:	6825      	ldr	r5, [r4, #0]
 8008a1a:	1961      	adds	r1, r4, r5
 8008a1c:	428b      	cmp	r3, r1
 8008a1e:	bf01      	itttt	eq
 8008a20:	6819      	ldreq	r1, [r3, #0]
 8008a22:	685b      	ldreq	r3, [r3, #4]
 8008a24:	1949      	addeq	r1, r1, r5
 8008a26:	6021      	streq	r1, [r4, #0]
 8008a28:	e7ed      	b.n	8008a06 <_free_r+0x22>
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	b10b      	cbz	r3, 8008a34 <_free_r+0x50>
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	d9fa      	bls.n	8008a2a <_free_r+0x46>
 8008a34:	6811      	ldr	r1, [r2, #0]
 8008a36:	1855      	adds	r5, r2, r1
 8008a38:	42a5      	cmp	r5, r4
 8008a3a:	d10b      	bne.n	8008a54 <_free_r+0x70>
 8008a3c:	6824      	ldr	r4, [r4, #0]
 8008a3e:	4421      	add	r1, r4
 8008a40:	1854      	adds	r4, r2, r1
 8008a42:	42a3      	cmp	r3, r4
 8008a44:	6011      	str	r1, [r2, #0]
 8008a46:	d1e0      	bne.n	8008a0a <_free_r+0x26>
 8008a48:	681c      	ldr	r4, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	6053      	str	r3, [r2, #4]
 8008a4e:	4421      	add	r1, r4
 8008a50:	6011      	str	r1, [r2, #0]
 8008a52:	e7da      	b.n	8008a0a <_free_r+0x26>
 8008a54:	d902      	bls.n	8008a5c <_free_r+0x78>
 8008a56:	230c      	movs	r3, #12
 8008a58:	6003      	str	r3, [r0, #0]
 8008a5a:	e7d6      	b.n	8008a0a <_free_r+0x26>
 8008a5c:	6825      	ldr	r5, [r4, #0]
 8008a5e:	1961      	adds	r1, r4, r5
 8008a60:	428b      	cmp	r3, r1
 8008a62:	bf04      	itt	eq
 8008a64:	6819      	ldreq	r1, [r3, #0]
 8008a66:	685b      	ldreq	r3, [r3, #4]
 8008a68:	6063      	str	r3, [r4, #4]
 8008a6a:	bf04      	itt	eq
 8008a6c:	1949      	addeq	r1, r1, r5
 8008a6e:	6021      	streq	r1, [r4, #0]
 8008a70:	6054      	str	r4, [r2, #4]
 8008a72:	e7ca      	b.n	8008a0a <_free_r+0x26>
 8008a74:	b003      	add	sp, #12
 8008a76:	bd30      	pop	{r4, r5, pc}
 8008a78:	20001ee8 	.word	0x20001ee8

08008a7c <sbrk_aligned>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	4e0e      	ldr	r6, [pc, #56]	; (8008ab8 <sbrk_aligned+0x3c>)
 8008a80:	460c      	mov	r4, r1
 8008a82:	6831      	ldr	r1, [r6, #0]
 8008a84:	4605      	mov	r5, r0
 8008a86:	b911      	cbnz	r1, 8008a8e <sbrk_aligned+0x12>
 8008a88:	f000 f8bc 	bl	8008c04 <_sbrk_r>
 8008a8c:	6030      	str	r0, [r6, #0]
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4628      	mov	r0, r5
 8008a92:	f000 f8b7 	bl	8008c04 <_sbrk_r>
 8008a96:	1c43      	adds	r3, r0, #1
 8008a98:	d00a      	beq.n	8008ab0 <sbrk_aligned+0x34>
 8008a9a:	1cc4      	adds	r4, r0, #3
 8008a9c:	f024 0403 	bic.w	r4, r4, #3
 8008aa0:	42a0      	cmp	r0, r4
 8008aa2:	d007      	beq.n	8008ab4 <sbrk_aligned+0x38>
 8008aa4:	1a21      	subs	r1, r4, r0
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	f000 f8ac 	bl	8008c04 <_sbrk_r>
 8008aac:	3001      	adds	r0, #1
 8008aae:	d101      	bne.n	8008ab4 <sbrk_aligned+0x38>
 8008ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	20001eec 	.word	0x20001eec

08008abc <_malloc_r>:
 8008abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac0:	1ccd      	adds	r5, r1, #3
 8008ac2:	f025 0503 	bic.w	r5, r5, #3
 8008ac6:	3508      	adds	r5, #8
 8008ac8:	2d0c      	cmp	r5, #12
 8008aca:	bf38      	it	cc
 8008acc:	250c      	movcc	r5, #12
 8008ace:	2d00      	cmp	r5, #0
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	db01      	blt.n	8008ad8 <_malloc_r+0x1c>
 8008ad4:	42a9      	cmp	r1, r5
 8008ad6:	d905      	bls.n	8008ae4 <_malloc_r+0x28>
 8008ad8:	230c      	movs	r3, #12
 8008ada:	603b      	str	r3, [r7, #0]
 8008adc:	2600      	movs	r6, #0
 8008ade:	4630      	mov	r0, r6
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	4e2e      	ldr	r6, [pc, #184]	; (8008ba0 <_malloc_r+0xe4>)
 8008ae6:	f000 f89d 	bl	8008c24 <__malloc_lock>
 8008aea:	6833      	ldr	r3, [r6, #0]
 8008aec:	461c      	mov	r4, r3
 8008aee:	bb34      	cbnz	r4, 8008b3e <_malloc_r+0x82>
 8008af0:	4629      	mov	r1, r5
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff ffc2 	bl	8008a7c <sbrk_aligned>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	4604      	mov	r4, r0
 8008afc:	d14d      	bne.n	8008b9a <_malloc_r+0xde>
 8008afe:	6834      	ldr	r4, [r6, #0]
 8008b00:	4626      	mov	r6, r4
 8008b02:	2e00      	cmp	r6, #0
 8008b04:	d140      	bne.n	8008b88 <_malloc_r+0xcc>
 8008b06:	6823      	ldr	r3, [r4, #0]
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	eb04 0803 	add.w	r8, r4, r3
 8008b10:	f000 f878 	bl	8008c04 <_sbrk_r>
 8008b14:	4580      	cmp	r8, r0
 8008b16:	d13a      	bne.n	8008b8e <_malloc_r+0xd2>
 8008b18:	6821      	ldr	r1, [r4, #0]
 8008b1a:	3503      	adds	r5, #3
 8008b1c:	1a6d      	subs	r5, r5, r1
 8008b1e:	f025 0503 	bic.w	r5, r5, #3
 8008b22:	3508      	adds	r5, #8
 8008b24:	2d0c      	cmp	r5, #12
 8008b26:	bf38      	it	cc
 8008b28:	250c      	movcc	r5, #12
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	f7ff ffa5 	bl	8008a7c <sbrk_aligned>
 8008b32:	3001      	adds	r0, #1
 8008b34:	d02b      	beq.n	8008b8e <_malloc_r+0xd2>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	442b      	add	r3, r5
 8008b3a:	6023      	str	r3, [r4, #0]
 8008b3c:	e00e      	b.n	8008b5c <_malloc_r+0xa0>
 8008b3e:	6822      	ldr	r2, [r4, #0]
 8008b40:	1b52      	subs	r2, r2, r5
 8008b42:	d41e      	bmi.n	8008b82 <_malloc_r+0xc6>
 8008b44:	2a0b      	cmp	r2, #11
 8008b46:	d916      	bls.n	8008b76 <_malloc_r+0xba>
 8008b48:	1961      	adds	r1, r4, r5
 8008b4a:	42a3      	cmp	r3, r4
 8008b4c:	6025      	str	r5, [r4, #0]
 8008b4e:	bf18      	it	ne
 8008b50:	6059      	strne	r1, [r3, #4]
 8008b52:	6863      	ldr	r3, [r4, #4]
 8008b54:	bf08      	it	eq
 8008b56:	6031      	streq	r1, [r6, #0]
 8008b58:	5162      	str	r2, [r4, r5]
 8008b5a:	604b      	str	r3, [r1, #4]
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f104 060b 	add.w	r6, r4, #11
 8008b62:	f000 f865 	bl	8008c30 <__malloc_unlock>
 8008b66:	f026 0607 	bic.w	r6, r6, #7
 8008b6a:	1d23      	adds	r3, r4, #4
 8008b6c:	1af2      	subs	r2, r6, r3
 8008b6e:	d0b6      	beq.n	8008ade <_malloc_r+0x22>
 8008b70:	1b9b      	subs	r3, r3, r6
 8008b72:	50a3      	str	r3, [r4, r2]
 8008b74:	e7b3      	b.n	8008ade <_malloc_r+0x22>
 8008b76:	6862      	ldr	r2, [r4, #4]
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	bf0c      	ite	eq
 8008b7c:	6032      	streq	r2, [r6, #0]
 8008b7e:	605a      	strne	r2, [r3, #4]
 8008b80:	e7ec      	b.n	8008b5c <_malloc_r+0xa0>
 8008b82:	4623      	mov	r3, r4
 8008b84:	6864      	ldr	r4, [r4, #4]
 8008b86:	e7b2      	b.n	8008aee <_malloc_r+0x32>
 8008b88:	4634      	mov	r4, r6
 8008b8a:	6876      	ldr	r6, [r6, #4]
 8008b8c:	e7b9      	b.n	8008b02 <_malloc_r+0x46>
 8008b8e:	230c      	movs	r3, #12
 8008b90:	603b      	str	r3, [r7, #0]
 8008b92:	4638      	mov	r0, r7
 8008b94:	f000 f84c 	bl	8008c30 <__malloc_unlock>
 8008b98:	e7a1      	b.n	8008ade <_malloc_r+0x22>
 8008b9a:	6025      	str	r5, [r4, #0]
 8008b9c:	e7de      	b.n	8008b5c <_malloc_r+0xa0>
 8008b9e:	bf00      	nop
 8008ba0:	20001ee8 	.word	0x20001ee8

08008ba4 <_realloc_r>:
 8008ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba8:	4680      	mov	r8, r0
 8008baa:	4614      	mov	r4, r2
 8008bac:	460e      	mov	r6, r1
 8008bae:	b921      	cbnz	r1, 8008bba <_realloc_r+0x16>
 8008bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	f7ff bf81 	b.w	8008abc <_malloc_r>
 8008bba:	b92a      	cbnz	r2, 8008bc8 <_realloc_r+0x24>
 8008bbc:	f7ff ff12 	bl	80089e4 <_free_r>
 8008bc0:	4625      	mov	r5, r4
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc8:	f000 f838 	bl	8008c3c <_malloc_usable_size_r>
 8008bcc:	4284      	cmp	r4, r0
 8008bce:	4607      	mov	r7, r0
 8008bd0:	d802      	bhi.n	8008bd8 <_realloc_r+0x34>
 8008bd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bd6:	d812      	bhi.n	8008bfe <_realloc_r+0x5a>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	4640      	mov	r0, r8
 8008bdc:	f7ff ff6e 	bl	8008abc <_malloc_r>
 8008be0:	4605      	mov	r5, r0
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d0ed      	beq.n	8008bc2 <_realloc_r+0x1e>
 8008be6:	42bc      	cmp	r4, r7
 8008be8:	4622      	mov	r2, r4
 8008bea:	4631      	mov	r1, r6
 8008bec:	bf28      	it	cs
 8008bee:	463a      	movcs	r2, r7
 8008bf0:	f7ff fba4 	bl	800833c <memcpy>
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	f7ff fef4 	bl	80089e4 <_free_r>
 8008bfc:	e7e1      	b.n	8008bc2 <_realloc_r+0x1e>
 8008bfe:	4635      	mov	r5, r6
 8008c00:	e7df      	b.n	8008bc2 <_realloc_r+0x1e>
	...

08008c04 <_sbrk_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d06      	ldr	r5, [pc, #24]	; (8008c20 <_sbrk_r+0x1c>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	f7f8 fb80 	bl	8001314 <_sbrk>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_sbrk_r+0x1a>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_sbrk_r+0x1a>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20001ef0 	.word	0x20001ef0

08008c24 <__malloc_lock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	; (8008c2c <__malloc_lock+0x8>)
 8008c26:	f000 b811 	b.w	8008c4c <__retarget_lock_acquire_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	20001ef4 	.word	0x20001ef4

08008c30 <__malloc_unlock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__malloc_unlock+0x8>)
 8008c32:	f000 b80c 	b.w	8008c4e <__retarget_lock_release_recursive>
 8008c36:	bf00      	nop
 8008c38:	20001ef4 	.word	0x20001ef4

08008c3c <_malloc_usable_size_r>:
 8008c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c40:	1f18      	subs	r0, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	bfbc      	itt	lt
 8008c46:	580b      	ldrlt	r3, [r1, r0]
 8008c48:	18c0      	addlt	r0, r0, r3
 8008c4a:	4770      	bx	lr

08008c4c <__retarget_lock_acquire_recursive>:
 8008c4c:	4770      	bx	lr

08008c4e <__retarget_lock_release_recursive>:
 8008c4e:	4770      	bx	lr

08008c50 <_init>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	bf00      	nop
 8008c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c56:	bc08      	pop	{r3}
 8008c58:	469e      	mov	lr, r3
 8008c5a:	4770      	bx	lr

08008c5c <_fini>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	bf00      	nop
 8008c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c62:	bc08      	pop	{r3}
 8008c64:	469e      	mov	lr, r3
 8008c66:	4770      	bx	lr
